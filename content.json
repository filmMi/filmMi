{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-indigo-card/source/css/style.less","path":"css/style.less","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/img/alipay.jpg","path":"img/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/img/brand.jpg","path":"img/brand.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/img/cc.png","path":"img/cc.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/img/img-err.png","path":"img/img-err.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/img/img-loading.png","path":"img/img-loading.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/img/wechat.jpg","path":"img/wechat.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/js/main.min.js","path":"js/main.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/js/search.min.js","path":"js/search.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Bold.woff2","path":"css/fonts/roboto/Roboto-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Light.eot","path":"css/fonts/roboto/Roboto-Light.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Light.woff2","path":"css/fonts/roboto/Roboto-Light.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Medium.eot","path":"css/fonts/roboto/Roboto-Medium.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Medium.woff2","path":"css/fonts/roboto/Roboto-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Regular.eot","path":"css/fonts/roboto/Roboto-Regular.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Regular.woff","path":"css/fonts/roboto/Roboto-Regular.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Regular.woff2","path":"css/fonts/roboto/Roboto-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Thin.eot","path":"css/fonts/roboto/Roboto-Thin.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Thin.woff","path":"css/fonts/roboto/Roboto-Thin.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Thin.woff2","path":"css/fonts/roboto/Roboto-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Bold.eot","path":"css/fonts/roboto/Roboto-Bold.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/fontawesome/fontawesome-webfont.woff2","path":"css/fonts/fontawesome/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Bold.woff","path":"css/fonts/roboto/Roboto-Bold.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Light.woff","path":"css/fonts/roboto/Roboto-Light.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Medium.woff","path":"css/fonts/roboto/Roboto-Medium.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Regular.ttf","path":"css/fonts/roboto/Roboto-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/fontawesome/FontAwesome.otf","path":"css/fonts/fontawesome/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/fontawesome/fontawesome-webfont.eot","path":"css/fonts/fontawesome/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Bold.ttf","path":"css/fonts/roboto/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Light.ttf","path":"css/fonts/roboto/Roboto-Light.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Medium.ttf","path":"css/fonts/roboto/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Thin.ttf","path":"css/fonts/roboto/Roboto-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/fontawesome/fontawesome-webfont.woff","path":"css/fonts/fontawesome/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/fontawesome/fontawesome-webfont.ttf","path":"css/fonts/fontawesome/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/fontawesome/fontawesome-webfont.svg","path":"css/fonts/fontawesome/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo-card/source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/hexo-theme-indigo-card/LICENSE","hash":"24944bf7920108f5a4790e6071c32e9102760c37","modified":1640935658189},{"_id":"themes/hexo-theme-indigo-card/package.json","hash":"a054e7c86fd36b9fcfbcf4e53d605454108a6e5f","modified":1640935658201},{"_id":"themes/hexo-theme-indigo-card/README.md","hash":"4bf26d9b43bf24b8e0a1a0d058437a347972f5e6","modified":1640935658189},{"_id":"themes/hexo-theme-indigo-card/_config.yml","hash":"a4e90156d834a9e6fe24f77dfe4d44df7397e1c9","modified":1640935658189},{"_id":"source/_posts/Chrome浏览器Network面板http请求时间分析.md","hash":"ee5004bc24c8e03ef3fe97d42d26e3952638a33b","modified":1640935658180},{"_id":"source/_posts/HTTP协议以及HTTP请求中8种请求方法.md","hash":"fbcc3593a30a2ff9043bd715e2288daf720fe5cb","modified":1640935658181},{"_id":"source/_posts/JQuery实现懒图片加载.md","hash":"23625fecb67f39a2d4df46311376de5227d015e5","modified":1640935658182},{"_id":"source/_posts/PT从零开始.md","hash":"f3b63d0d7e454a08ccbe0a2802449b6acdb4b5ba","modified":1640937983761},{"_id":"source/_posts/React的生命周期.md","hash":"8b6926d47bb1b9b7e4a9c7a184f1507720e689aa","modified":1640935658182},{"_id":"source/_posts/dva-js知识地图.md","hash":"773fc3d177d56e5ece3086c141d4e16395869ff5","modified":1640935658183},{"_id":"source/_posts/web前端优化加快网页加载速度方法.md","hash":"6e31b5d0f4b4eec7f519b6346b933dd93633f38a","modified":1640935658183},{"_id":"source/_posts/zepto的使用方法.md","hash":"996e4c78d1074b487e2ea38cf23e7f68c4cd4509","modified":1640935658183},{"_id":"source/_posts/使用http-proxy-middleware解决前端开发中跨域的问题.md","hash":"49536a64bf2eb51d6bb3b3ccef913c772fc77fa4","modified":1640935658188},{"_id":"source/_posts/函数防抖和函数分流.md","hash":"dcde79e7a63a5c608581226e11e32dd8f4dbd313","modified":1640935658188},{"_id":"source/tags/index.md","hash":"66054fbb13e98bc5b4a4a431a39ad657078892cc","modified":1640935658188},{"_id":"source/introduction/index.md","hash":"f379040fae147a823a61154f46eb0c2bcaafda5b","modified":1640935658188},{"_id":"source/_posts/前端面试题目.md","hash":"3ba4f9d284292b309782c0e0e6587d4110e35451","modified":1640935658188},{"_id":"themes/hexo-theme-indigo-card/.editorconfig","hash":"9b0445427777519defe360ea38c61729d847b3d3","modified":1640935658189},{"_id":"themes/hexo-theme-indigo-card/scripts/plugins.js","hash":"e439d717513616bedeed37ba9b05117470809b21","modified":1640935658201},{"_id":"themes/hexo-theme-indigo-card/languages/ja.yml","hash":"74fd480874bf5e773ba7f9d2a94697cda979091f","modified":1640935658190},{"_id":"themes/hexo-theme-indigo-card/languages/nl-NL","hash":"9085c04491f93066f2369911cc2175b59ae596ad","modified":1640935658190},{"_id":"themes/hexo-theme-indigo-card/languages/zh-CN.yml","hash":"7dc6ae434dde390b6768d244132e23cc78c33817","modified":1640935658190},{"_id":"themes/hexo-theme-indigo-card/layout/categories.ejs","hash":"41783d2069d5080566a99e6312aa2113105f8b41","modified":1640935658197},{"_id":"themes/hexo-theme-indigo-card/languages/zh-TW.yml","hash":"6a9e820be66eb12ae746f2527e0dc1adf927c685","modified":1640935658190},{"_id":"themes/hexo-theme-indigo-card/layout/archive.ejs","hash":"d039719e21f6a6fa2925b00aaa623a180a78c818","modified":1640935658197},{"_id":"themes/hexo-theme-indigo-card/layout/index.ejs","hash":"39477807b98b2d2df78f3b82498a11e90be8222c","modified":1640935658199},{"_id":"themes/hexo-theme-indigo-card/layout/layout.ejs","hash":"d52f43fa9572d70cae834e4887c8897b43744805","modified":1640935658199},{"_id":"themes/hexo-theme-indigo-card/layout/category.ejs","hash":"7ea26a8a935886963eda82f41c7bd5270cf780d9","modified":1640935658198},{"_id":"themes/hexo-theme-indigo-card/layout/post.ejs","hash":"afbf8532dc8d148ca4dff2ca127a3382907cf2f5","modified":1640935658199},{"_id":"themes/hexo-theme-indigo-card/layout/tag.ejs","hash":"36786a3de7f6cad58209603f7d84ba23addea174","modified":1640935658200},{"_id":"themes/hexo-theme-indigo-card/layout/page.ejs","hash":"afb98face24d39a21ebbbde6592a9afc98572aa4","modified":1640935658199},{"_id":"themes/hexo-theme-indigo-card/layout/tags.ejs","hash":"20466446c41409d14a3d42ccaec24a65a045efef","modified":1640935658200},{"_id":"themes/hexo-theme-indigo-card/languages/en.yml","hash":"1957d2bfc3a4cef299f4f169b431e9b1128ba162","modified":1640935658189},{"_id":"themes/hexo-theme-indigo-card/source/css/style.less","hash":"f22d4146e0bdb4485d33f20080c67ba05724afea","modified":1640935658229},{"_id":"themes/hexo-theme-indigo-card/source/img/alipay.jpg","hash":"fcb3d8c0de12e371fca6bddb4ace905bdb07ae04","modified":1640935658229},{"_id":"themes/hexo-theme-indigo-card/source/img/brand.jpg","hash":"0e237f1b433851c156e1f1cdaeb044054b3b9879","modified":1640935658235},{"_id":"themes/hexo-theme-indigo-card/source/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1640935658235},{"_id":"themes/hexo-theme-indigo-card/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1640935658236},{"_id":"themes/hexo-theme-indigo-card/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1640935658236},{"_id":"themes/hexo-theme-indigo-card/source/img/wechat.jpg","hash":"3a9bd2e86fcb9a8abeee36c0e5216b02b1b8ef13","modified":1640935658236},{"_id":"themes/hexo-theme-indigo-card/source/js/main.js","hash":"300b2e963683ced162e28afcd24ffc970fc23ac2","modified":1640935658237},{"_id":"themes/hexo-theme-indigo-card/source/js/main.min.js","hash":"8acf4480f8ab859423b8926b9b790c67b5a77276","modified":1640935658237},{"_id":"themes/hexo-theme-indigo-card/source/js/search.js","hash":"55dc369d1674aa68bef7f42f29d8d33135139a2b","modified":1640938094253},{"_id":"themes/hexo-theme-indigo-card/source/js/search.min.js","hash":"7e7f8fb26f89dbe79a25aa1ffc6e7cc267fcecff","modified":1640938094253},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/archive.ejs","hash":"55cd81ef9183426d6d99fd91550fce0a9cc92aa0","modified":1640935658191},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/after-footer.ejs","hash":"9ac30b9439fab69973cf4722dbf2945a18fd3804","modified":1640935658191},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/head.ejs","hash":"02a95a88774cc50dbcc32242b6c8ac7e9d9028bb","modified":1640935658192},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/footer.ejs","hash":"e1a71a30a1c7a664ddf3ba3e7eb3a5b90bc4b33c","modified":1640935658191},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/header.ejs","hash":"6156bf20791e46fc1c5872113276c1c1f5c13773","modified":1640935658192},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/index-item.ejs","hash":"ec7b3ec79bbbead9c7e43e2e6c6b5c8bef509410","modified":1640935658193},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/menu.ejs","hash":"d39afaad6b0dd2a3ae27e6db3e9a6cd6014622fa","modified":1640935658193},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/loading.ejs","hash":"bc4cb19b20de55a0332647f4dca9684184383685","modified":1640935658193},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/paginator.ejs","hash":"dc27242927890f130a64400596b9b7ad5fca8972","modified":1640935658193},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/post.ejs","hash":"a87d9b0485b3bf4cdfdad890e5974c43dbaa8240","modified":1640935658195},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/script.ejs","hash":"439d6315a1b16e32b77a68c3f0cb2961d581086a","modified":1640935658197},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/search.ejs","hash":"c2091c621b5480ef1e69d72027028cec8e929892","modified":1640935658197},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/tags-bar.ejs","hash":"19eff4876d31080a427644f7a43fe172d0c008c6","modified":1640935658197},{"_id":"themes/hexo-theme-indigo-card/source/css/_partial/archives.less","hash":"7d2a6886265386c640e94ffca3f042675f701a35","modified":1640935658202},{"_id":"themes/hexo-theme-indigo-card/source/css/_partial/article.less","hash":"d476cd3537bcd8a02d055cc223f5c805b8638cc2","modified":1640935658203},{"_id":"themes/hexo-theme-indigo-card/source/css/_partial/gotop.less","hash":"b7db31b9bc563c10b9e3cf3e6d9cfddfeb3e805a","modified":1640935658204},{"_id":"themes/hexo-theme-indigo-card/source/css/_partial/header.less","hash":"90f0948a9182c14b1dac1e9dbed3c883543266f9","modified":1640935658204},{"_id":"themes/hexo-theme-indigo-card/source/css/_partial/highlight.less","hash":"58492b7cdb45fe09b026b2f34e8ae69c2ddb8228","modified":1640935658204},{"_id":"themes/hexo-theme-indigo-card/source/css/_partial/layout.less","hash":"4390ed22abad59c8b28ed1a479a52f15b5f9cf4a","modified":1640935658204},{"_id":"themes/hexo-theme-indigo-card/source/css/_partial/lightbox.less","hash":"9b961eb1d70e7658f42cf2ca895fa5e35a6b6541","modified":1640935658205},{"_id":"themes/hexo-theme-indigo-card/source/css/_partial/loading.less","hash":"f9d06a1e24fb4857fd18d7a0bfbb3a0ab2d1c742","modified":1640935658205},{"_id":"themes/hexo-theme-indigo-card/source/css/_partial/page.less","hash":"4f76489608b167336da55e241a66642bedf67b4e","modified":1640935658205},{"_id":"themes/hexo-theme-indigo-card/source/css/_partial/postlist.less","hash":"1c041bf91106808e5480c60d9ece45431bb503b3","modified":1640935658206},{"_id":"themes/hexo-theme-indigo-card/source/css/_partial/reward.less","hash":"4857f90bb57fc22ca3f942d8934d86d5e9e82c1e","modified":1640935658206},{"_id":"themes/hexo-theme-indigo-card/source/css/_partial/roboto.less","hash":"2e0469ed8161d5672d903ca1a8027cd65fe007f1","modified":1640935658206},{"_id":"themes/hexo-theme-indigo-card/source/css/_partial/search.less","hash":"1d6641ae7568a0153d24beba9fd9704d2b155f6c","modified":1640935658207},{"_id":"themes/hexo-theme-indigo-card/source/css/_partial/share.less","hash":"27d80bcc96a53dd1e7eaa9a7d746e4b212357302","modified":1640935658207},{"_id":"themes/hexo-theme-indigo-card/source/css/_partial/tags.less","hash":"959f4373fda6e45f6a4041a995ed3ea8a05a5170","modified":1640935658207},{"_id":"themes/hexo-theme-indigo-card/source/css/_partial/variable.less","hash":"082896b966ed25b39c74e7b007b4f54c235685a4","modified":1640935658207},{"_id":"themes/hexo-theme-indigo-card/source/css/_partial/waves.less","hash":"77bfd0b373b0469eb0176167fb076ccda4edf2a7","modified":1640935658208},{"_id":"themes/hexo-theme-indigo-card/source/css/_plugin/valine.less","hash":"ddbb7647d83f732f9b0d5d817d40a748006949cc","modified":1640935658208},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/plugins/baidu.ejs","hash":"e44d526029f122e9c2c74f3a647c35002c818cbe","modified":1640935658193},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/plugins/disqus.ejs","hash":"4a0c01e4195f685f9825fcd016d01249dbdd52ca","modified":1640935658193},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/plugins/dynamic-title.ejs","hash":"23c101d45911eb0846533aaa2d409c43aa5e899a","modified":1640935658194},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/plugins/gitment.ejs","hash":"5723d507eca4390e8e5d18c0770e7953b8c22f5a","modified":1640935658194},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/plugins/google-analytics.ejs","hash":"a947f4076b54b48d4df5baf2d5b3c39b632c7576","modified":1640935658194},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/plugins/hyper-comments.ejs","hash":"e5a83acc7c2e385b0c9abf428e86e8fdfd3a5202","modified":1640935658194},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/plugins/mathjax.ejs","hash":"ea603a057196de53bd6afab1fddb93d11f27eb81","modified":1640935658194},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/plugins/page-visit.ejs","hash":"2decb77bf3c1a064ea6ce1d4e78892c434d9c884","modified":1640935658194},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/plugins/site-visit.ejs","hash":"8fbd0910828f1ab6eba728bdecc9811d623baae2","modified":1640935658194},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/plugins/tajs.ejs","hash":"97b48fe10be1c71d4ff25ccec3bd92d97466c9c5","modified":1640935658194},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/plugins/uyan.ejs","hash":"e370bd04ea5cf1c83e0c20516aff7ba3ca8b2d0b","modified":1640935658195},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/plugins/valine.ejs","hash":"a976ca36bd09aeb2902bf94fcc7a59975ea25148","modified":1640935658195},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/post/comment.ejs","hash":"bcc3bd7a9023d71778f15e98c88552335ae69a69","modified":1640935658195},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/post/category.ejs","hash":"c7476165721a3a5e34d00d8c5c07e1e5474cd800","modified":1640935658195},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/post/copyright.ejs","hash":"5305ed30ee35cf50f87656737d0ffe85f5bfc16b","modified":1640935658195},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/post/date.ejs","hash":"ea85b46e12d3b9c3612eef7aa76289a663fbc096","modified":1640935658195},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/post/head-meta.ejs","hash":"b0c680ce5b8aaf461a6731b1ff1287bd140c168a","modified":1640935658195},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/post/nav.ejs","hash":"11e7d504f7c7a3c4c052da13cfa8ea4862c9383e","modified":1640935658196},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/post/reward-btn.ejs","hash":"41c242fe3159dc68cec8dd00ab6d2663f5a51179","modified":1640935658196},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/post/reward.ejs","hash":"23719e09689b3afbb19214c6603eb02f896cb9ba","modified":1640935658196},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/post/share-fab.ejs","hash":"93482ad7d1e01b966f5ee1c5d12b88564e02b349","modified":1640935658196},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/post/share.ejs","hash":"8df0d7bf6f8e106cdbdac2dd10a97367aa0695f8","modified":1640935658196},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/post/tag.ejs","hash":"b3dc38652c4a018a37418136478dcd522fc49f79","modified":1640935658196},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/post/title.ejs","hash":"062d56cb88ae2be3a6616b911d4ebeffcbfe3cff","modified":1640935658196},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/post/toc.ejs","hash":"ad287a70724eb7cd8cd2a03a45b68032ee99973d","modified":1640935658196},{"_id":"themes/hexo-theme-indigo-card/layout/_partial/post/updated.ejs","hash":"5caa71745aa340ce57938a930f3b898ee7518d74","modified":1640935658196},{"_id":"themes/hexo-theme-indigo-card/source/css/_partial/fontawesome.less","hash":"ca30b732d2efbb0cd55a272ecdabc97f895aee78","modified":1640935658203},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1640935658217},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1640935658218},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1640935658221},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1640935658221},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1640935658223},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1640935658224},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1640935658226},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1640935658226},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1640935658227},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1640935658228},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1640935658228},{"_id":"source/_posts/Chrome浏览器Network面板http请求时间分析/network.jpg","hash":"a23e18238e7de27669e0383e540ffa0a1fdd2eb9","modified":1640935658181},{"_id":"source/_posts/React的生命周期/123.jpg","hash":"4da0e553905cc8533d322d3c8781e621bd278613","modified":1640935658182},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1640935658216},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1640935658215},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1640935658217},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1640935658220},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1640935658223},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1640935658225},{"_id":"source/_posts/zepto的使用方法/a.png","hash":"9479dbfc9c49ba3bd4be8a48c1ceb9673ce44ab5","modified":1640935658184},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1640935658209},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1640935658210},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1640935658217},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1640935658219},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1640935658222},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1640935658228},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1640935658214},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1640935658214},{"_id":"source/_posts/zepto的使用方法/b.png","hash":"b639b5734f475064e8525f6476d8463dd441877c","modified":1640935658187},{"_id":"themes/hexo-theme-indigo-card/source/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1640935658212},{"_id":"themes/hexo-theme-indigo-card/source/img/avatar.jpg","hash":"c3c981659e9e20d078db01297d30eb566977a194","modified":1640935658234},{"_id":"public/tags/index.html","hash":"405ca3673de6b45bfa9ea583656c07cc211787ff","modified":1640938112153},{"_id":"public/introduction/index.html","hash":"9d3c5469151dc30a8d22c4066b540b10fddea98d","modified":1640938112153},{"_id":"public/archives/index.html","hash":"b1cd18d00a6f94f48b9b36d54e4510b5c4347975","modified":1640938112153},{"_id":"public/archives/page/2/index.html","hash":"740d888f3be052309001b5c13b73aac1c174c565","modified":1640938112153},{"_id":"public/archives/2018/index.html","hash":"b70efd183b0a40c17704d40f5ca3e72c31e4dbdd","modified":1640938112153},{"_id":"public/archives/2018/08/index.html","hash":"0f66d1811c770edff38f046218fe64cadffdd1bf","modified":1640938112153},{"_id":"public/archives/2018/10/index.html","hash":"a1ac2907c4b5546435eb8dd6d81a458b1fe1338d","modified":1640938112153},{"_id":"public/archives/2021/index.html","hash":"0562dab11931d1631717ca260aa06df7b1bd0134","modified":1640938112153},{"_id":"public/archives/2021/12/index.html","hash":"97475d9e55953cf5846687688584a3996287c45d","modified":1640938112153},{"_id":"public/page/2/index.html","hash":"1635f5d08e84111f1fe38b7c9a09f03977118232","modified":1640938112153},{"_id":"public/tags/前端工具/index.html","hash":"58a3ea8f52b13b8650915a833139d17b3c300f94","modified":1640938112154},{"_id":"public/tags/JQuery/index.html","hash":"acdc20de9adec8d55e531528dab19530b5b60f4d","modified":1640938112154},{"_id":"public/tags/pt/index.html","hash":"1b23ab7c4ee9953d8e80484ecdf437c8dec4a452","modified":1640938112154},{"_id":"public/2021/12/31/PT从零开始/index.html","hash":"ba22a6d8dda94ca252c9108638d0d8e062c11cbf","modified":1640938112154},{"_id":"public/2018/10/31/函数防抖和函数分流/index.html","hash":"8437cc357460e9e5ffb3e46900e3bf37a19e6783","modified":1640938112154},{"_id":"public/2018/10/31/dva-js知识地图/index.html","hash":"b5b0be321852a24b3b48a88f0920c18c39ff56bf","modified":1640938112154},{"_id":"public/2018/08/14/React的生命周期/index.html","hash":"bfb93b1685c7186abff8b62285fe6b2885a28189","modified":1640938112154},{"_id":"public/2018/08/10/Chrome浏览器Network面板http请求时间分析/index.html","hash":"b33fe9c1c93f35579077b1cf1717fb086ebb8087","modified":1640938112154},{"_id":"public/2018/08/09/HTTP协议以及HTTP请求中8种请求方法/index.html","hash":"55e26926c18de6baccd323db4f95d9dd14608234","modified":1640938112154},{"_id":"public/2018/08/08/web前端优化加快网页加载速度方法/index.html","hash":"4b36c618bb79f70d1c45137337df25c292b389ed","modified":1640938112154},{"_id":"public/2018/08/08/JQuery实现懒图片加载/index.html","hash":"e3877d46d1780d54a80b1c940a0d8aa115a54895","modified":1640938112154},{"_id":"public/2018/08/08/zepto的使用方法/index.html","hash":"f7ab44785e38cc6d355ce7a16fd59e5e66c44169","modified":1640938112154},{"_id":"public/2018/08/08/使用http-proxy-middleware解决前端开发中跨域的问题/index.html","hash":"01e2c0c2ab624842bee9cac139e0e9039fa8e006","modified":1640938112154},{"_id":"public/2018/08/07/前端面试题目/index.html","hash":"d838d197c0b9569f0e0132b47ab9e89216f22dc9","modified":1640938112154},{"_id":"public/index.html","hash":"1b0d7225773677651a5af7206b3e44107117ac05","modified":1640938112154},{"_id":"public/css/style.less","hash":"f22d4146e0bdb4485d33f20080c67ba05724afea","modified":1640938112162},{"_id":"public/img/alipay.jpg","hash":"fcb3d8c0de12e371fca6bddb4ace905bdb07ae04","modified":1640938112162},{"_id":"public/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1640938112162},{"_id":"public/img/brand.jpg","hash":"0e237f1b433851c156e1f1cdaeb044054b3b9879","modified":1640938112162},{"_id":"public/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1640938112162},{"_id":"public/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1640938112162},{"_id":"public/img/wechat.jpg","hash":"3a9bd2e86fcb9a8abeee36c0e5216b02b1b8ef13","modified":1640938112162},{"_id":"public/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1640938112162},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1640938112162},{"_id":"public/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1640938112162},{"_id":"public/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1640938112162},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1640938112162},{"_id":"public/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1640938112162},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1640938112162},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1640938112163},{"_id":"public/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1640938112163},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1640938112163},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1640938112163},{"_id":"public/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1640938112163},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1640938112163},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1640938112163},{"_id":"public/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1640938112163},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1640938112167},{"_id":"public/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1640938112167},{"_id":"public/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1640938112168},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1640938112168},{"_id":"public/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1640938112168},{"_id":"public/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1640938112168},{"_id":"public/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1640938112168},{"_id":"public/2018/08/14/React的生命周期/123.jpg","hash":"4da0e553905cc8533d322d3c8781e621bd278613","modified":1640938112169},{"_id":"public/2018/08/10/Chrome浏览器Network面板http请求时间分析/network.jpg","hash":"a23e18238e7de27669e0383e540ffa0a1fdd2eb9","modified":1640938112169},{"_id":"public/js/main.min.js","hash":"8acf4480f8ab859423b8926b9b790c67b5a77276","modified":1640938112172},{"_id":"public/js/search.min.js","hash":"7e7f8fb26f89dbe79a25aa1ffc6e7cc267fcecff","modified":1640938112172},{"_id":"public/js/search.js","hash":"55dc369d1674aa68bef7f42f29d8d33135139a2b","modified":1640938112172},{"_id":"public/js/main.js","hash":"300b2e963683ced162e28afcd24ffc970fc23ac2","modified":1640938112172},{"_id":"public/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1640938112174},{"_id":"public/2018/08/08/zepto的使用方法/a.png","hash":"9479dbfc9c49ba3bd4be8a48c1ceb9673ce44ab5","modified":1640938112178},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1640938112180},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1640938112182},{"_id":"public/2018/08/08/zepto的使用方法/b.png","hash":"b639b5734f475064e8525f6476d8463dd441877c","modified":1640938112199},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1640938112203},{"_id":"public/img/avatar.jpg","hash":"c3c981659e9e20d078db01297d30eb566977a194","modified":1640938112215}],"Category":[],"Data":[],"Page":[{"layout":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"layout: tags\ncomments: false\n---\n","date":"2021-12-31T07:27:38.188Z","updated":"2021-12-31T07:27:38.188Z","path":"tags/index.html","title":"","_id":"ckxu46m300001dc6k0m258uak","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"introduction","title":"人生难得须尽","comments":0,"reward":false,"_content":"\n\n我的个来自农村的孩子。从小妈妈就告诉我，多读书多看报少吃零食多睡觉。。。","source":"introduction/index.md","raw":"layout: introduction\ntitle: 人生难得须尽\ncomments: false\nreward: false\n---\n\n\n我的个来自农村的孩子。从小妈妈就告诉我，多读书多看报少吃零食多睡觉。。。","date":"2021-12-31T07:27:38.188Z","updated":"2021-12-31T07:27:38.188Z","path":"introduction/index.html","_id":"ckxu46m330003dc6kqqxbwrpf","content":"<p>我的个来自农村的孩子。从小妈妈就告诉我，多读书多看报少吃零食多睡觉。。。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>我的个来自农村的孩子。从小妈妈就告诉我，多读书多看报少吃零食多睡觉。。。</p>\n"}],"Post":[{"title":"Chrome浏览器Network面板http请求时间分析","date":"2018-08-10T06:29:04.000Z","_content":"\n![](./network.jpg)\n\n### Stalled（阻塞）\n浏览器对同一个主机域名的并发连接数有限制，因此如果当前的连接数已经超过上限，那么其余请求就会被阻塞，等待新的可用连接；此外脚本也会阻塞其他组件的下载；\n#### 优化措施：\n1、将资源合理分布到多台主机上，可以提高并发数，但是增加并行下载数量也会增大开销，这取决于带宽和CPU速度，过多的并行下载会降低性能；\n2、脚本置于页面底部；\n### DNS Lookup（域名解析）\n请求某域名下的资源，浏览器需要先通过DNS解析器得到该域名服务器的IP地址。在DNS查找完成之前，浏览器不能从主机名那里下载到任何东西。\n#### 优化措施：\n1、利用DNS缓存（设置TTL时间）；\n2、利用Connection:keep-alive特性建立持久连接，可以在当前连接上进行多个请求，无需再进行域名解析；\n### Initial connection（初始化连接）\nTCP建立连接的三次握手时间\n### SSL（包含于HTTPS连接中）\nhttp是超文本传输协议，以明文方式发送内容，不提供任何方式的数据加密，如果被不法分子截取浏览器和服务器之间的传输报文，会获取其中的信息。\nhttps 是安全套接字层超文本传输协议，就是在HTTP的基础上加入了SSL协议，SSL依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信加密。\n因此建立HTTPS连接的时间相当于三次握手的时间+SSL时间。\n### Request sent（发送请求）\n发送HTTP请求的时间（从第一个bit到最后一个bit）\n#### 优化措施：\n1、减少HTTP请求，可以使用CSS Sprites、内联图片、合并脚本和样式表等；\n2、对不常变化的组件添加长久的Expires头（相当于设置久远的过期时间），在后续的页面浏览中可以避免不必要的HTTP请求；\n### Waiting（等待响应）\n通常是耗费时间最长的。从发送请求到收到响应之间的空隙，会受到线路、服务器距离等因素的影响。\n#### 优化措施：\n1、使用CDN，将用户的访问指向距离最近的工作正常的缓存服务器上，由缓存服务器直接响应用户请求，提高响应速度；\n### Content Download（下载）\n下载HTTP响应的时间（包含头部和响应体）\n#### 优化措施：\n1、通过条件Get请求，对比If-Modified-Since和Last-Modified时间，确定是否使用缓存中的组件，服务器会返回“304 Not Modified”状态码，减小响应的大小；\n2、移除重复脚本，精简和压缩代码，如借助自动化构建工具grunt、gulp等；\n3、压缩响应内容，服务器端启用gzip压缩，可以减少下载时间；","source":"_posts/Chrome浏览器Network面板http请求时间分析.md","raw":"---\ntitle: Chrome浏览器Network面板http请求时间分析\ndate: 2018-08-10 14:29:04\ntags: 前端工具\n---\n\n![](./network.jpg)\n\n### Stalled（阻塞）\n浏览器对同一个主机域名的并发连接数有限制，因此如果当前的连接数已经超过上限，那么其余请求就会被阻塞，等待新的可用连接；此外脚本也会阻塞其他组件的下载；\n#### 优化措施：\n1、将资源合理分布到多台主机上，可以提高并发数，但是增加并行下载数量也会增大开销，这取决于带宽和CPU速度，过多的并行下载会降低性能；\n2、脚本置于页面底部；\n### DNS Lookup（域名解析）\n请求某域名下的资源，浏览器需要先通过DNS解析器得到该域名服务器的IP地址。在DNS查找完成之前，浏览器不能从主机名那里下载到任何东西。\n#### 优化措施：\n1、利用DNS缓存（设置TTL时间）；\n2、利用Connection:keep-alive特性建立持久连接，可以在当前连接上进行多个请求，无需再进行域名解析；\n### Initial connection（初始化连接）\nTCP建立连接的三次握手时间\n### SSL（包含于HTTPS连接中）\nhttp是超文本传输协议，以明文方式发送内容，不提供任何方式的数据加密，如果被不法分子截取浏览器和服务器之间的传输报文，会获取其中的信息。\nhttps 是安全套接字层超文本传输协议，就是在HTTP的基础上加入了SSL协议，SSL依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信加密。\n因此建立HTTPS连接的时间相当于三次握手的时间+SSL时间。\n### Request sent（发送请求）\n发送HTTP请求的时间（从第一个bit到最后一个bit）\n#### 优化措施：\n1、减少HTTP请求，可以使用CSS Sprites、内联图片、合并脚本和样式表等；\n2、对不常变化的组件添加长久的Expires头（相当于设置久远的过期时间），在后续的页面浏览中可以避免不必要的HTTP请求；\n### Waiting（等待响应）\n通常是耗费时间最长的。从发送请求到收到响应之间的空隙，会受到线路、服务器距离等因素的影响。\n#### 优化措施：\n1、使用CDN，将用户的访问指向距离最近的工作正常的缓存服务器上，由缓存服务器直接响应用户请求，提高响应速度；\n### Content Download（下载）\n下载HTTP响应的时间（包含头部和响应体）\n#### 优化措施：\n1、通过条件Get请求，对比If-Modified-Since和Last-Modified时间，确定是否使用缓存中的组件，服务器会返回“304 Not Modified”状态码，减小响应的大小；\n2、移除重复脚本，精简和压缩代码，如借助自动化构建工具grunt、gulp等；\n3、压缩响应内容，服务器端启用gzip压缩，可以减少下载时间；","slug":"Chrome浏览器Network面板http请求时间分析","published":1,"updated":"2021-12-31T07:27:38.180Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxu46m2w0000dc6kwltzb4zy","content":"<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/10/Chrome浏览器Network面板http请求时间分析/./network.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"Stalled（阻塞）\"><a href=\"#Stalled（阻塞）\" class=\"headerlink\" title=\"Stalled（阻塞）\"></a>Stalled（阻塞）</h3><p>浏览器对同一个主机域名的并发连接数有限制，因此如果当前的连接数已经超过上限，那么其余请求就会被阻塞，等待新的可用连接；此外脚本也会阻塞其他组件的下载；</p>\n<h4 id=\"优化措施：\"><a href=\"#优化措施：\" class=\"headerlink\" title=\"优化措施：\"></a>优化措施：</h4><p>1、将资源合理分布到多台主机上，可以提高并发数，但是增加并行下载数量也会增大开销，这取决于带宽和CPU速度，过多的并行下载会降低性能；<br>2、脚本置于页面底部；</p>\n<h3 id=\"DNS-Lookup（域名解析）\"><a href=\"#DNS-Lookup（域名解析）\" class=\"headerlink\" title=\"DNS Lookup（域名解析）\"></a>DNS Lookup（域名解析）</h3><p>请求某域名下的资源，浏览器需要先通过DNS解析器得到该域名服务器的IP地址。在DNS查找完成之前，浏览器不能从主机名那里下载到任何东西。</p>\n<h4 id=\"优化措施：-1\"><a href=\"#优化措施：-1\" class=\"headerlink\" title=\"优化措施：\"></a>优化措施：</h4><p>1、利用DNS缓存（设置TTL时间）；<br>2、利用Connection:keep-alive特性建立持久连接，可以在当前连接上进行多个请求，无需再进行域名解析；</p>\n<h3 id=\"Initial-connection（初始化连接）\"><a href=\"#Initial-connection（初始化连接）\" class=\"headerlink\" title=\"Initial connection（初始化连接）\"></a>Initial connection（初始化连接）</h3><p>TCP建立连接的三次握手时间</p>\n<h3 id=\"SSL（包含于HTTPS连接中）\"><a href=\"#SSL（包含于HTTPS连接中）\" class=\"headerlink\" title=\"SSL（包含于HTTPS连接中）\"></a>SSL（包含于HTTPS连接中）</h3><p>http是超文本传输协议，以明文方式发送内容，不提供任何方式的数据加密，如果被不法分子截取浏览器和服务器之间的传输报文，会获取其中的信息。<br>https 是安全套接字层超文本传输协议，就是在HTTP的基础上加入了SSL协议，SSL依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信加密。<br>因此建立HTTPS连接的时间相当于三次握手的时间+SSL时间。</p>\n<h3 id=\"Request-sent（发送请求）\"><a href=\"#Request-sent（发送请求）\" class=\"headerlink\" title=\"Request sent（发送请求）\"></a>Request sent（发送请求）</h3><p>发送HTTP请求的时间（从第一个bit到最后一个bit）</p>\n<h4 id=\"优化措施：-2\"><a href=\"#优化措施：-2\" class=\"headerlink\" title=\"优化措施：\"></a>优化措施：</h4><p>1、减少HTTP请求，可以使用CSS Sprites、内联图片、合并脚本和样式表等；<br>2、对不常变化的组件添加长久的Expires头（相当于设置久远的过期时间），在后续的页面浏览中可以避免不必要的HTTP请求；</p>\n<h3 id=\"Waiting（等待响应）\"><a href=\"#Waiting（等待响应）\" class=\"headerlink\" title=\"Waiting（等待响应）\"></a>Waiting（等待响应）</h3><p>通常是耗费时间最长的。从发送请求到收到响应之间的空隙，会受到线路、服务器距离等因素的影响。</p>\n<h4 id=\"优化措施：-3\"><a href=\"#优化措施：-3\" class=\"headerlink\" title=\"优化措施：\"></a>优化措施：</h4><p>1、使用CDN，将用户的访问指向距离最近的工作正常的缓存服务器上，由缓存服务器直接响应用户请求，提高响应速度；</p>\n<h3 id=\"Content-Download（下载）\"><a href=\"#Content-Download（下载）\" class=\"headerlink\" title=\"Content Download（下载）\"></a>Content Download（下载）</h3><p>下载HTTP响应的时间（包含头部和响应体）</p>\n<h4 id=\"优化措施：-4\"><a href=\"#优化措施：-4\" class=\"headerlink\" title=\"优化措施：\"></a>优化措施：</h4><p>1、通过条件Get请求，对比If-Modified-Since和Last-Modified时间，确定是否使用缓存中的组件，服务器会返回“304 Not Modified”状态码，减小响应的大小；<br>2、移除重复脚本，精简和压缩代码，如借助自动化构建工具grunt、gulp等；<br>3、压缩响应内容，服务器端启用gzip压缩，可以减少下载时间；</p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/10/Chrome浏览器Network面板http请求时间分析/./network.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"Stalled（阻塞）\"><a href=\"#Stalled（阻塞）\" class=\"headerlink\" title=\"Stalled（阻塞）\"></a>Stalled（阻塞）</h3><p>浏览器对同一个主机域名的并发连接数有限制，因此如果当前的连接数已经超过上限，那么其余请求就会被阻塞，等待新的可用连接；此外脚本也会阻塞其他组件的下载；</p>\n<h4 id=\"优化措施：\"><a href=\"#优化措施：\" class=\"headerlink\" title=\"优化措施：\"></a>优化措施：</h4><p>1、将资源合理分布到多台主机上，可以提高并发数，但是增加并行下载数量也会增大开销，这取决于带宽和CPU速度，过多的并行下载会降低性能；<br>2、脚本置于页面底部；</p>\n<h3 id=\"DNS-Lookup（域名解析）\"><a href=\"#DNS-Lookup（域名解析）\" class=\"headerlink\" title=\"DNS Lookup（域名解析）\"></a>DNS Lookup（域名解析）</h3><p>请求某域名下的资源，浏览器需要先通过DNS解析器得到该域名服务器的IP地址。在DNS查找完成之前，浏览器不能从主机名那里下载到任何东西。</p>\n<h4 id=\"优化措施：-1\"><a href=\"#优化措施：-1\" class=\"headerlink\" title=\"优化措施：\"></a>优化措施：</h4><p>1、利用DNS缓存（设置TTL时间）；<br>2、利用Connection:keep-alive特性建立持久连接，可以在当前连接上进行多个请求，无需再进行域名解析；</p>\n<h3 id=\"Initial-connection（初始化连接）\"><a href=\"#Initial-connection（初始化连接）\" class=\"headerlink\" title=\"Initial connection（初始化连接）\"></a>Initial connection（初始化连接）</h3><p>TCP建立连接的三次握手时间</p>\n<h3 id=\"SSL（包含于HTTPS连接中）\"><a href=\"#SSL（包含于HTTPS连接中）\" class=\"headerlink\" title=\"SSL（包含于HTTPS连接中）\"></a>SSL（包含于HTTPS连接中）</h3><p>http是超文本传输协议，以明文方式发送内容，不提供任何方式的数据加密，如果被不法分子截取浏览器和服务器之间的传输报文，会获取其中的信息。<br>https 是安全套接字层超文本传输协议，就是在HTTP的基础上加入了SSL协议，SSL依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信加密。<br>因此建立HTTPS连接的时间相当于三次握手的时间+SSL时间。</p>\n<h3 id=\"Request-sent（发送请求）\"><a href=\"#Request-sent（发送请求）\" class=\"headerlink\" title=\"Request sent（发送请求）\"></a>Request sent（发送请求）</h3><p>发送HTTP请求的时间（从第一个bit到最后一个bit）</p>\n<h4 id=\"优化措施：-2\"><a href=\"#优化措施：-2\" class=\"headerlink\" title=\"优化措施：\"></a>优化措施：</h4><p>1、减少HTTP请求，可以使用CSS Sprites、内联图片、合并脚本和样式表等；<br>2、对不常变化的组件添加长久的Expires头（相当于设置久远的过期时间），在后续的页面浏览中可以避免不必要的HTTP请求；</p>\n<h3 id=\"Waiting（等待响应）\"><a href=\"#Waiting（等待响应）\" class=\"headerlink\" title=\"Waiting（等待响应）\"></a>Waiting（等待响应）</h3><p>通常是耗费时间最长的。从发送请求到收到响应之间的空隙，会受到线路、服务器距离等因素的影响。</p>\n<h4 id=\"优化措施：-3\"><a href=\"#优化措施：-3\" class=\"headerlink\" title=\"优化措施：\"></a>优化措施：</h4><p>1、使用CDN，将用户的访问指向距离最近的工作正常的缓存服务器上，由缓存服务器直接响应用户请求，提高响应速度；</p>\n<h3 id=\"Content-Download（下载）\"><a href=\"#Content-Download（下载）\" class=\"headerlink\" title=\"Content Download（下载）\"></a>Content Download（下载）</h3><p>下载HTTP响应的时间（包含头部和响应体）</p>\n<h4 id=\"优化措施：-4\"><a href=\"#优化措施：-4\" class=\"headerlink\" title=\"优化措施：\"></a>优化措施：</h4><p>1、通过条件Get请求，对比If-Modified-Since和Last-Modified时间，确定是否使用缓存中的组件，服务器会返回“304 Not Modified”状态码，减小响应的大小；<br>2、移除重复脚本，精简和压缩代码，如借助自动化构建工具grunt、gulp等；<br>3、压缩响应内容，服务器端启用gzip压缩，可以减少下载时间；</p>\n"},{"title":"HTTP协议以及HTTP请求中8种请求方法","date":"2018-08-09T01:48:46.000Z","_content":"#### 什么是协议？\n协议，是指通信的双方，在通信流程或内容格式上，共同遵守的标准。\n#### 什么是http协议？\nhttp协议，是互联网中最常见的网络通信标准。\n#### http协议的特点\n1. 通信流程：断开式（无状态)\n  断开式：http协议每次响应完成后，会断开与客户端的连接\n  无状态：由于服务器断开了之前的连接，就无法知晓连接间的关系\n\n2. 内容格式：消息头和消息体\n\n#### HTTP请求的方法：\nHTTP/1.1协议中共定义了八种方法（有时也叫“动作”），来表明Request-URL指定的资源不同的操作方式\n\n1、 OPTIONS  \n返回服务器针对特定资源所支持的HTTP请求方法，也可以利用向web服务器发送‘*’的请求来测试服务器的功能性。\n2、HEAD\n向服务器索与GET请求相一致的响应，只不过响应体将不会被返回。这一方法可以再不必传输整个响应内容的情况下，就可以获取包含在响应小消息头中的元信息。\n3、GET\n向特定的资源发出请求。它本质就是发送一个请求来取得服务器上的某一资源。资源通过一组HTTP头和呈现数据（如HTML文本，或者图片或者视频等）返回给客户端。GET请求中，永远不会包含呈现数据。\n4、POST\n向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。 Loadrunner中对应POST请求函数：web_submit_data,web_submit_form\n5、PUT\n向指定资源位置上传其最新内容\n6、DELETE\n请求服务器删除Request-URL所标识的资源\n7、TRACE\n回显服务器收到的请求，主要用于测试或诊断\n8、CONNECT\nHTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。\n注意：\n1）方法名称是区分大小写的，当某个请求所针对的资源不支持对应的请求方法的时候，服务器应当返回状态码405（Mothod Not Allowed）；当服务器不认识或者不支持对应的请求方法时，应返回状态码501（Not Implemented）。\n2）HTTP服务器至少应该实现GET和HEAD/POST方法，其他方法都是可选的，此外除上述方法，特定的HTTP服务器支持扩展自定义的方法。","source":"_posts/HTTP协议以及HTTP请求中8种请求方法.md","raw":"---\ntitle: HTTP协议以及HTTP请求中8种请求方法\ndate: 2018-08-09 09:48:46\ntags:\n---\n#### 什么是协议？\n协议，是指通信的双方，在通信流程或内容格式上，共同遵守的标准。\n#### 什么是http协议？\nhttp协议，是互联网中最常见的网络通信标准。\n#### http协议的特点\n1. 通信流程：断开式（无状态)\n  断开式：http协议每次响应完成后，会断开与客户端的连接\n  无状态：由于服务器断开了之前的连接，就无法知晓连接间的关系\n\n2. 内容格式：消息头和消息体\n\n#### HTTP请求的方法：\nHTTP/1.1协议中共定义了八种方法（有时也叫“动作”），来表明Request-URL指定的资源不同的操作方式\n\n1、 OPTIONS  \n返回服务器针对特定资源所支持的HTTP请求方法，也可以利用向web服务器发送‘*’的请求来测试服务器的功能性。\n2、HEAD\n向服务器索与GET请求相一致的响应，只不过响应体将不会被返回。这一方法可以再不必传输整个响应内容的情况下，就可以获取包含在响应小消息头中的元信息。\n3、GET\n向特定的资源发出请求。它本质就是发送一个请求来取得服务器上的某一资源。资源通过一组HTTP头和呈现数据（如HTML文本，或者图片或者视频等）返回给客户端。GET请求中，永远不会包含呈现数据。\n4、POST\n向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。 Loadrunner中对应POST请求函数：web_submit_data,web_submit_form\n5、PUT\n向指定资源位置上传其最新内容\n6、DELETE\n请求服务器删除Request-URL所标识的资源\n7、TRACE\n回显服务器收到的请求，主要用于测试或诊断\n8、CONNECT\nHTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。\n注意：\n1）方法名称是区分大小写的，当某个请求所针对的资源不支持对应的请求方法的时候，服务器应当返回状态码405（Mothod Not Allowed）；当服务器不认识或者不支持对应的请求方法时，应返回状态码501（Not Implemented）。\n2）HTTP服务器至少应该实现GET和HEAD/POST方法，其他方法都是可选的，此外除上述方法，特定的HTTP服务器支持扩展自定义的方法。","slug":"HTTP协议以及HTTP请求中8种请求方法","published":1,"updated":"2021-12-31T07:27:38.181Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxu46m310002dc6knwhod9sl","content":"<h4 id=\"什么是协议？\"><a href=\"#什么是协议？\" class=\"headerlink\" title=\"什么是协议？\"></a>什么是协议？</h4><p>协议，是指通信的双方，在通信流程或内容格式上，共同遵守的标准。</p>\n<h4 id=\"什么是http协议？\"><a href=\"#什么是http协议？\" class=\"headerlink\" title=\"什么是http协议？\"></a>什么是http协议？</h4><p>http协议，是互联网中最常见的网络通信标准。</p>\n<h4 id=\"http协议的特点\"><a href=\"#http协议的特点\" class=\"headerlink\" title=\"http协议的特点\"></a>http协议的特点</h4><ol>\n<li><p>通信流程：断开式（无状态)<br>断开式：http协议每次响应完成后，会断开与客户端的连接<br>无状态：由于服务器断开了之前的连接，就无法知晓连接间的关系</p>\n</li>\n<li><p>内容格式：消息头和消息体</p>\n</li>\n</ol>\n<h4 id=\"HTTP请求的方法：\"><a href=\"#HTTP请求的方法：\" class=\"headerlink\" title=\"HTTP请求的方法：\"></a>HTTP请求的方法：</h4><p>HTTP/1.1协议中共定义了八种方法（有时也叫“动作”），来表明Request-URL指定的资源不同的操作方式</p>\n<p>1、 OPTIONS<br>返回服务器针对特定资源所支持的HTTP请求方法，也可以利用向web服务器发送‘*’的请求来测试服务器的功能性。<br>2、HEAD<br>向服务器索与GET请求相一致的响应，只不过响应体将不会被返回。这一方法可以再不必传输整个响应内容的情况下，就可以获取包含在响应小消息头中的元信息。<br>3、GET<br>向特定的资源发出请求。它本质就是发送一个请求来取得服务器上的某一资源。资源通过一组HTTP头和呈现数据（如HTML文本，或者图片或者视频等）返回给客户端。GET请求中，永远不会包含呈现数据。<br>4、POST<br>向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。 Loadrunner中对应POST请求函数：web_submit_data,web_submit_form<br>5、PUT<br>向指定资源位置上传其最新内容<br>6、DELETE<br>请求服务器删除Request-URL所标识的资源<br>7、TRACE<br>回显服务器收到的请求，主要用于测试或诊断<br>8、CONNECT<br>HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。<br>注意：<br>1）方法名称是区分大小写的，当某个请求所针对的资源不支持对应的请求方法的时候，服务器应当返回状态码405（Mothod Not Allowed）；当服务器不认识或者不支持对应的请求方法时，应返回状态码501（Not Implemented）。<br>2）HTTP服务器至少应该实现GET和HEAD/POST方法，其他方法都是可选的，此外除上述方法，特定的HTTP服务器支持扩展自定义的方法。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"什么是协议？\"><a href=\"#什么是协议？\" class=\"headerlink\" title=\"什么是协议？\"></a>什么是协议？</h4><p>协议，是指通信的双方，在通信流程或内容格式上，共同遵守的标准。</p>\n<h4 id=\"什么是http协议？\"><a href=\"#什么是http协议？\" class=\"headerlink\" title=\"什么是http协议？\"></a>什么是http协议？</h4><p>http协议，是互联网中最常见的网络通信标准。</p>\n<h4 id=\"http协议的特点\"><a href=\"#http协议的特点\" class=\"headerlink\" title=\"http协议的特点\"></a>http协议的特点</h4><ol>\n<li><p>通信流程：断开式（无状态)<br>断开式：http协议每次响应完成后，会断开与客户端的连接<br>无状态：由于服务器断开了之前的连接，就无法知晓连接间的关系</p>\n</li>\n<li><p>内容格式：消息头和消息体</p>\n</li>\n</ol>\n<h4 id=\"HTTP请求的方法：\"><a href=\"#HTTP请求的方法：\" class=\"headerlink\" title=\"HTTP请求的方法：\"></a>HTTP请求的方法：</h4><p>HTTP/1.1协议中共定义了八种方法（有时也叫“动作”），来表明Request-URL指定的资源不同的操作方式</p>\n<p>1、 OPTIONS<br>返回服务器针对特定资源所支持的HTTP请求方法，也可以利用向web服务器发送‘*’的请求来测试服务器的功能性。<br>2、HEAD<br>向服务器索与GET请求相一致的响应，只不过响应体将不会被返回。这一方法可以再不必传输整个响应内容的情况下，就可以获取包含在响应小消息头中的元信息。<br>3、GET<br>向特定的资源发出请求。它本质就是发送一个请求来取得服务器上的某一资源。资源通过一组HTTP头和呈现数据（如HTML文本，或者图片或者视频等）返回给客户端。GET请求中，永远不会包含呈现数据。<br>4、POST<br>向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。 Loadrunner中对应POST请求函数：web_submit_data,web_submit_form<br>5、PUT<br>向指定资源位置上传其最新内容<br>6、DELETE<br>请求服务器删除Request-URL所标识的资源<br>7、TRACE<br>回显服务器收到的请求，主要用于测试或诊断<br>8、CONNECT<br>HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。<br>注意：<br>1）方法名称是区分大小写的，当某个请求所针对的资源不支持对应的请求方法的时候，服务器应当返回状态码405（Mothod Not Allowed）；当服务器不认识或者不支持对应的请求方法时，应返回状态码501（Not Implemented）。<br>2）HTTP服务器至少应该实现GET和HEAD/POST方法，其他方法都是可选的，此外除上述方法，特定的HTTP服务器支持扩展自定义的方法。</p>\n"},{"title":"JQuery实现懒图片加载","date":"2018-08-08T05:43:03.000Z","_content":"\n在网页中，常常需要用到图片，而图片需要消耗较大的流量。正常情况下，浏览器会解析整个HTML代码，然后从上到下依次加载`<img src=\"xxx\">`的图片标签。如果页面很长，隐藏在页面下方的图片其实已经被浏览器加载了。如果用户不向下滚动页面，就没有看到这些图片，相当于白白浪费了图片的流量。\n\n所以，淘宝、京东这些流量非常巨大的电商，商品介绍页又必须有大量的图片，因此，这些页面的图片都是“按需加载”，即用户滚动页面时显示出来的时候才加载图片。当网速非常快的时候，用户并不能感知懒加载的动作，既省流量又不影响用户浏览。\n\n本文给出一种利用jQuery实现图片懒加载的原理。它的基本思想是：在输出HTML的时候，不要直接输出`<img src=\"xxx\"`，而是输出如下的img标签： \n``` bash\n<img src=\"/static/loading.gif\" data-src=\"http://真正的图片地址/xxx.jpg\">\n```\n因此，页面显示的图片是一个gif加载动画。当页面滚动时，如果图片出现在屏幕中，就利用jQuery把`<img>`的src属性替换为data-src的内容，浏览器就会实时加载。\n为了更好的体验，初始加载中给src一个默认的gif图片。\nJavaScript代码如下\n```bash\n// 注意: 需要引入jQuery和underscore\n$(function() {\n    // 获取window的引用:\n    var $window = $(window);\n    // 获取包含data-src属性的img，并以jQuery对象存入数组:\n    var lazyImgs = _.map($('img[data-src]').get(), function (i) {\n        return $(i);\n    });\n    // 定义事件函数:\n    var onScroll = function() {\n        // 获取页面滚动的高度:\n        var wtop = $window.scrollTop();\n        // 判断是否还有未加载的img:\n        if (lazyImgs.length > 0) {\n            // 获取可视区域高度:\n            var wheight = $window.height();\n            // 存放待删除的索引:\n            var loadedIndex = [];\n            // 循环处理数组的每个img元素:\n            _.each(lazyImgs, function ($i, index) {\n                // 判断是否在可视范围内:\n                if ($i.offset().top - wtop < wheight) {\n                    // 设置src属性:\n                    $i.attr('src', $i.attr('data-src'));\n                    // 添加到待删除数组:\n                    loadedIndex.unshift(index);\n                }\n            });\n            // 删除已处理的对象:\n            _.each(loadedIndex, function (index) {\n                lazyImgs.splice(index, 1);\n            });\n        }\n    };\n    // 绑定事件:\n    $window.scroll(onScroll);\n    // 手动触发一次:\n    onScroll();\n```\n`onScroll()`函数最后要手动触发一次，因为页面显示时，并未触发scroll事件。如果图片已经在可视区域内，这些图片仍然是loading状态，需要手动触发一次，就可以正常显示。\n要测试图片懒加载效果，可以在Chrome浏览器的控制台选择“Network”，把“Online”改为“Slow 3G”就可以模拟慢速网络下浏览器懒加载图片的效果。\n下面贴上完整测试的代码\n```bash\n<!doctype html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>ssss</title>\n    \n    <style>\n        ul,li{\n            list-style:none;\n        }\n        .container{\n            width: 600px;\n            margin: 0 auto;\n        }\n        .container li{\n            float: left;\n            margin: 10px 10px;\n        }\n        .container li img{\n            width: 240px;\n            height: 180px;\n        }\n        p{\n            float: left;\n        }\n    </style>\n</head>\n<body>\n<ul class=\"container\">\n    <li><a href=\"#\"><img src=\"\" data-src=\"http://cdn.jirengu.com/book.jirengu.com/img/1.jpg\" /></a></li>\n    <li><a href=\"#\"><img src=\"\" data-src=\"http://cdn.jirengu.com/book.jirengu.com/img/2.jpg\" /></a></li>\n    <li><a href=\"#\"><img src=\"\" data-src=\"http://cdn.jirengu.com/book.jirengu.com/img/3.jpg\" /></a></li>\n    <li><a href=\"#\"><img src=\"\" data-src=\"http://cdn.jirengu.com/book.jirengu.com/img/4.jpg\" /></a></li>\n    <li><a href=\"#\"><img src=\"\" data-src=\"http://cdn.jirengu.com/book.jirengu.com/img/5.jpg\" /></a></li>\n    <li><a href=\"#\"><img src=\"\" data-src=\"http://cdn.jirengu.com/book.jirengu.com/img/6.jpg\" /></a></li>\n    <li><a href=\"#\"><img src=\"\" data-src=\"http://cdn.jirengu.com/book.jirengu.com/img/7.jpg\" /></a></li>\n    <li><a href=\"#\"><img src=\"\" data-src=\"http://cdn.jirengu.com/book.jirengu.com/img/8.jpg\" /></a></li>\n    <li><a href=\"#\"><img src=\"\" data-src=\"http://cdn.jirengu.com/book.jirengu.com/img/9.jpg\" /></a></li>\n    <li><a href=\"#\"><img src=\"\" data-src=\"http://cdn.jirengu.com/book.jirengu.com/img/10.jpg\" /></a></li>\n    <li><a href=\"#\"><img src=\"\" data-src=\"http://cdn.jirengu.com/book.jirengu.com/img/11.jpg\" /></a></li>\n    <li><a href=\"#\"><img src=\"\" data-src=\"http://cdn.jirengu.com/book.jirengu.com/img/12.jpg\" /></a></li>\n    <li><a href=\"#\"><img src=\"\" data-src=\"http://cdn.jirengu.com/book.jirengu.com/img/13.jpg\" /></a></li>\n    <li><a href=\"#\"><img src=\"\" data-src=\"http://cdn.jirengu.com/book.jirengu.com/img/14.jpg\" /></a></li>\n    <li><a href=\"#\"><img src=\"\" data-src=\"http://cdn.jirengu.com/book.jirengu.com/img/15.jpg\" /></a></li>\n    <li><a href=\"#\"><img src=\"\" data-src=\"http://cdn.jirengu.com/book.jirengu.com/img/16.jpg\" /></a></li>\n</ul>\n<script src=\"http://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js\"></script>\n<script src=\"https://cdn.bootcss.com/underscore.js/1.9.0/underscore-min.js\"></script>\n<script>\n    // 注意: 需要引入jQuery和underscore\n$(function() {\n    // 获取window的引用:\n    var $window = $(window);\n    // 获取包含data-src属性的img，并以jQuery对象存入数组:\n    var lazyImgs = _.map($('img[data-src]').get(), function (i) {\n        return $(i);\n    });\n    // 定义事件函数:\n    var onScroll = function() {\n        // 获取页面滚动的高度:\n        var wtop = $window.scrollTop();\n        // 判断是否还有未加载的img:\n        if (lazyImgs.length > 0) {\n            // 获取可视区域高度:\n            var wheight = $window.height();\n            // 存放待删除的索引:\n            var loadedIndex = [];\n            // 循环处理数组的每个img元素:\n            _.each(lazyImgs, function ($i, index) {\n                // 判断是否在可视范围内:\n                if ($i.offset().top - wtop < wheight) {\n                    // 设置src属性:\n                    $i.attr('src', $i.attr('data-src'));\n                    // 添加到待删除数组:\n                    loadedIndex.unshift(index);\n                }\n            });\n            // 删除已处理的对象:\n            _.each(loadedIndex, function (index) {\n                lazyImgs.splice(index, 1);\n            });\n        }\n    };\n    // 绑定事件:\n    $window.scroll(onScroll);\n    // 手动触发一次:\n    onScroll();\n})\n</script>\n</body>\n</html>\n```","source":"_posts/JQuery实现懒图片加载.md","raw":"---\ntitle: JQuery实现懒图片加载\ndate: 2018-08-08 13:43:03\ntags: JQuery\n---\n\n在网页中，常常需要用到图片，而图片需要消耗较大的流量。正常情况下，浏览器会解析整个HTML代码，然后从上到下依次加载`<img src=\"xxx\">`的图片标签。如果页面很长，隐藏在页面下方的图片其实已经被浏览器加载了。如果用户不向下滚动页面，就没有看到这些图片，相当于白白浪费了图片的流量。\n\n所以，淘宝、京东这些流量非常巨大的电商，商品介绍页又必须有大量的图片，因此，这些页面的图片都是“按需加载”，即用户滚动页面时显示出来的时候才加载图片。当网速非常快的时候，用户并不能感知懒加载的动作，既省流量又不影响用户浏览。\n\n本文给出一种利用jQuery实现图片懒加载的原理。它的基本思想是：在输出HTML的时候，不要直接输出`<img src=\"xxx\"`，而是输出如下的img标签： \n``` bash\n<img src=\"/static/loading.gif\" data-src=\"http://真正的图片地址/xxx.jpg\">\n```\n因此，页面显示的图片是一个gif加载动画。当页面滚动时，如果图片出现在屏幕中，就利用jQuery把`<img>`的src属性替换为data-src的内容，浏览器就会实时加载。\n为了更好的体验，初始加载中给src一个默认的gif图片。\nJavaScript代码如下\n```bash\n// 注意: 需要引入jQuery和underscore\n$(function() {\n    // 获取window的引用:\n    var $window = $(window);\n    // 获取包含data-src属性的img，并以jQuery对象存入数组:\n    var lazyImgs = _.map($('img[data-src]').get(), function (i) {\n        return $(i);\n    });\n    // 定义事件函数:\n    var onScroll = function() {\n        // 获取页面滚动的高度:\n        var wtop = $window.scrollTop();\n        // 判断是否还有未加载的img:\n        if (lazyImgs.length > 0) {\n            // 获取可视区域高度:\n            var wheight = $window.height();\n            // 存放待删除的索引:\n            var loadedIndex = [];\n            // 循环处理数组的每个img元素:\n            _.each(lazyImgs, function ($i, index) {\n                // 判断是否在可视范围内:\n                if ($i.offset().top - wtop < wheight) {\n                    // 设置src属性:\n                    $i.attr('src', $i.attr('data-src'));\n                    // 添加到待删除数组:\n                    loadedIndex.unshift(index);\n                }\n            });\n            // 删除已处理的对象:\n            _.each(loadedIndex, function (index) {\n                lazyImgs.splice(index, 1);\n            });\n        }\n    };\n    // 绑定事件:\n    $window.scroll(onScroll);\n    // 手动触发一次:\n    onScroll();\n```\n`onScroll()`函数最后要手动触发一次，因为页面显示时，并未触发scroll事件。如果图片已经在可视区域内，这些图片仍然是loading状态，需要手动触发一次，就可以正常显示。\n要测试图片懒加载效果，可以在Chrome浏览器的控制台选择“Network”，把“Online”改为“Slow 3G”就可以模拟慢速网络下浏览器懒加载图片的效果。\n下面贴上完整测试的代码\n```bash\n<!doctype html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>ssss</title>\n    \n    <style>\n        ul,li{\n            list-style:none;\n        }\n        .container{\n            width: 600px;\n            margin: 0 auto;\n        }\n        .container li{\n            float: left;\n            margin: 10px 10px;\n        }\n        .container li img{\n            width: 240px;\n            height: 180px;\n        }\n        p{\n            float: left;\n        }\n    </style>\n</head>\n<body>\n<ul class=\"container\">\n    <li><a href=\"#\"><img src=\"\" data-src=\"http://cdn.jirengu.com/book.jirengu.com/img/1.jpg\" /></a></li>\n    <li><a href=\"#\"><img src=\"\" data-src=\"http://cdn.jirengu.com/book.jirengu.com/img/2.jpg\" /></a></li>\n    <li><a href=\"#\"><img src=\"\" data-src=\"http://cdn.jirengu.com/book.jirengu.com/img/3.jpg\" /></a></li>\n    <li><a href=\"#\"><img src=\"\" data-src=\"http://cdn.jirengu.com/book.jirengu.com/img/4.jpg\" /></a></li>\n    <li><a href=\"#\"><img src=\"\" data-src=\"http://cdn.jirengu.com/book.jirengu.com/img/5.jpg\" /></a></li>\n    <li><a href=\"#\"><img src=\"\" data-src=\"http://cdn.jirengu.com/book.jirengu.com/img/6.jpg\" /></a></li>\n    <li><a href=\"#\"><img src=\"\" data-src=\"http://cdn.jirengu.com/book.jirengu.com/img/7.jpg\" /></a></li>\n    <li><a href=\"#\"><img src=\"\" data-src=\"http://cdn.jirengu.com/book.jirengu.com/img/8.jpg\" /></a></li>\n    <li><a href=\"#\"><img src=\"\" data-src=\"http://cdn.jirengu.com/book.jirengu.com/img/9.jpg\" /></a></li>\n    <li><a href=\"#\"><img src=\"\" data-src=\"http://cdn.jirengu.com/book.jirengu.com/img/10.jpg\" /></a></li>\n    <li><a href=\"#\"><img src=\"\" data-src=\"http://cdn.jirengu.com/book.jirengu.com/img/11.jpg\" /></a></li>\n    <li><a href=\"#\"><img src=\"\" data-src=\"http://cdn.jirengu.com/book.jirengu.com/img/12.jpg\" /></a></li>\n    <li><a href=\"#\"><img src=\"\" data-src=\"http://cdn.jirengu.com/book.jirengu.com/img/13.jpg\" /></a></li>\n    <li><a href=\"#\"><img src=\"\" data-src=\"http://cdn.jirengu.com/book.jirengu.com/img/14.jpg\" /></a></li>\n    <li><a href=\"#\"><img src=\"\" data-src=\"http://cdn.jirengu.com/book.jirengu.com/img/15.jpg\" /></a></li>\n    <li><a href=\"#\"><img src=\"\" data-src=\"http://cdn.jirengu.com/book.jirengu.com/img/16.jpg\" /></a></li>\n</ul>\n<script src=\"http://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js\"></script>\n<script src=\"https://cdn.bootcss.com/underscore.js/1.9.0/underscore-min.js\"></script>\n<script>\n    // 注意: 需要引入jQuery和underscore\n$(function() {\n    // 获取window的引用:\n    var $window = $(window);\n    // 获取包含data-src属性的img，并以jQuery对象存入数组:\n    var lazyImgs = _.map($('img[data-src]').get(), function (i) {\n        return $(i);\n    });\n    // 定义事件函数:\n    var onScroll = function() {\n        // 获取页面滚动的高度:\n        var wtop = $window.scrollTop();\n        // 判断是否还有未加载的img:\n        if (lazyImgs.length > 0) {\n            // 获取可视区域高度:\n            var wheight = $window.height();\n            // 存放待删除的索引:\n            var loadedIndex = [];\n            // 循环处理数组的每个img元素:\n            _.each(lazyImgs, function ($i, index) {\n                // 判断是否在可视范围内:\n                if ($i.offset().top - wtop < wheight) {\n                    // 设置src属性:\n                    $i.attr('src', $i.attr('data-src'));\n                    // 添加到待删除数组:\n                    loadedIndex.unshift(index);\n                }\n            });\n            // 删除已处理的对象:\n            _.each(loadedIndex, function (index) {\n                lazyImgs.splice(index, 1);\n            });\n        }\n    };\n    // 绑定事件:\n    $window.scroll(onScroll);\n    // 手动触发一次:\n    onScroll();\n})\n</script>\n</body>\n</html>\n```","slug":"JQuery实现懒图片加载","published":1,"updated":"2021-12-31T07:27:38.182Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxu46m370005dc6kgtyq055f","content":"<p>在网页中，常常需要用到图片，而图片需要消耗较大的流量。正常情况下，浏览器会解析整个HTML代码，然后从上到下依次加载<code>&lt;img src=&quot;xxx&quot;&gt;</code>的图片标签。如果页面很长，隐藏在页面下方的图片其实已经被浏览器加载了。如果用户不向下滚动页面，就没有看到这些图片，相当于白白浪费了图片的流量。</p>\n<p>所以，淘宝、京东这些流量非常巨大的电商，商品介绍页又必须有大量的图片，因此，这些页面的图片都是“按需加载”，即用户滚动页面时显示出来的时候才加载图片。当网速非常快的时候，用户并不能感知懒加载的动作，既省流量又不影响用户浏览。</p>\n<p>本文给出一种利用jQuery实现图片懒加载的原理。它的基本思想是：在输出HTML的时候，不要直接输出<code>&lt;img src=&quot;xxx&quot;</code>，而是输出如下的img标签：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;img src=<span class=\"string\">\"/static/loading.gif\"</span> data-src=<span class=\"string\">\"http://真正的图片地址/xxx.jpg\"</span>&gt;</span><br></pre></td></tr></table></figure></p>\n<p>因此，页面显示的图片是一个gif加载动画。当页面滚动时，如果图片出现在屏幕中，就利用jQuery把<code>&lt;img&gt;</code>的src属性替换为data-src的内容，浏览器就会实时加载。<br>为了更好的体验，初始加载中给src一个默认的gif图片。<br>JavaScript代码如下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 注意: 需要引入jQuery和underscore</span><br><span class=\"line\">$(<span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    // 获取window的引用:</span><br><span class=\"line\">    var <span class=\"variable\">$window</span> = $(window);</span><br><span class=\"line\">    // 获取包含data-src属性的img，并以jQuery对象存入数组:</span><br><span class=\"line\">    var lazyImgs = _.map($(<span class=\"string\">'img[data-src]'</span>).get(), <span class=\"keyword\">function</span> (i) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> $(i);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    // 定义事件函数:</span><br><span class=\"line\">    var onScroll = <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">        // 获取页面滚动的高度:</span><br><span class=\"line\">        var wtop = <span class=\"variable\">$window</span>.scrollTop();</span><br><span class=\"line\">        // 判断是否还有未加载的img:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lazyImgs.length &gt; 0) &#123;</span><br><span class=\"line\">            // 获取可视区域高度:</span><br><span class=\"line\">            var wheight = <span class=\"variable\">$window</span>.height();</span><br><span class=\"line\">            // 存放待删除的索引:</span><br><span class=\"line\">            var loadedIndex = [];</span><br><span class=\"line\">            // 循环处理数组的每个img元素:</span><br><span class=\"line\">            _.each(lazyImgs, <span class=\"keyword\">function</span> (<span class=\"variable\">$i</span>, index) &#123;</span><br><span class=\"line\">                // 判断是否在可视范围内:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"variable\">$i</span>.offset().top - wtop &lt; wheight) &#123;</span><br><span class=\"line\">                    // 设置src属性:</span><br><span class=\"line\">                    <span class=\"variable\">$i</span>.attr(<span class=\"string\">'src'</span>, <span class=\"variable\">$i</span>.attr(<span class=\"string\">'data-src'</span>));</span><br><span class=\"line\">                    // 添加到待删除数组:</span><br><span class=\"line\">                    loadedIndex.unshift(index);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            // 删除已处理的对象:</span><br><span class=\"line\">            _.each(loadedIndex, <span class=\"keyword\">function</span> (index) &#123;</span><br><span class=\"line\">                lazyImgs.splice(index, 1);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    // 绑定事件:</span><br><span class=\"line\">    <span class=\"variable\">$window</span>.scroll(onScroll);</span><br><span class=\"line\">    // 手动触发一次:</span><br><span class=\"line\">    onScroll();</span><br></pre></td></tr></table></figure></p>\n<p><code>onScroll()</code>函数最后要手动触发一次，因为页面显示时，并未触发scroll事件。如果图片已经在可视区域内，这些图片仍然是loading状态，需要手动触发一次，就可以正常显示。<br>要测试图片懒加载效果，可以在Chrome浏览器的控制台选择“Network”，把“Online”改为“Slow 3G”就可以模拟慢速网络下浏览器懒加载图片的效果。<br>下面贴上完整测试的代码<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!doctype html&gt;</span><br><span class=\"line\">&lt;html lang=<span class=\"string\">\"en\"</span>&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=<span class=\"string\">\"UTF-8\"</span>&gt;</span><br><span class=\"line\">    &lt;title&gt;ssss&lt;/title&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;style&gt;</span><br><span class=\"line\">        ul,li&#123;</span><br><span class=\"line\">            list-style:none;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .container&#123;</span><br><span class=\"line\">            width: 600px;</span><br><span class=\"line\">            margin: 0 auto;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .container li&#123;</span><br><span class=\"line\">            <span class=\"built_in\">float</span>: left;</span><br><span class=\"line\">            margin: 10px 10px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .container li img&#123;</span><br><span class=\"line\">            width: 240px;</span><br><span class=\"line\">            height: 180px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p&#123;</span><br><span class=\"line\">            <span class=\"built_in\">float</span>: left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;ul class=<span class=\"string\">\"container\"</span>&gt;</span><br><span class=\"line\">    &lt;li&gt;&lt;a href=<span class=\"string\">\"#\"</span>&gt;&lt;img src=<span class=\"string\">\"\"</span> data-src=<span class=\"string\">\"http://cdn.jirengu.com/book.jirengu.com/img/1.jpg\"</span> /&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;&lt;a href=<span class=\"string\">\"#\"</span>&gt;&lt;img src=<span class=\"string\">\"\"</span> data-src=<span class=\"string\">\"http://cdn.jirengu.com/book.jirengu.com/img/2.jpg\"</span> /&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;&lt;a href=<span class=\"string\">\"#\"</span>&gt;&lt;img src=<span class=\"string\">\"\"</span> data-src=<span class=\"string\">\"http://cdn.jirengu.com/book.jirengu.com/img/3.jpg\"</span> /&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;&lt;a href=<span class=\"string\">\"#\"</span>&gt;&lt;img src=<span class=\"string\">\"\"</span> data-src=<span class=\"string\">\"http://cdn.jirengu.com/book.jirengu.com/img/4.jpg\"</span> /&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;&lt;a href=<span class=\"string\">\"#\"</span>&gt;&lt;img src=<span class=\"string\">\"\"</span> data-src=<span class=\"string\">\"http://cdn.jirengu.com/book.jirengu.com/img/5.jpg\"</span> /&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;&lt;a href=<span class=\"string\">\"#\"</span>&gt;&lt;img src=<span class=\"string\">\"\"</span> data-src=<span class=\"string\">\"http://cdn.jirengu.com/book.jirengu.com/img/6.jpg\"</span> /&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;&lt;a href=<span class=\"string\">\"#\"</span>&gt;&lt;img src=<span class=\"string\">\"\"</span> data-src=<span class=\"string\">\"http://cdn.jirengu.com/book.jirengu.com/img/7.jpg\"</span> /&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;&lt;a href=<span class=\"string\">\"#\"</span>&gt;&lt;img src=<span class=\"string\">\"\"</span> data-src=<span class=\"string\">\"http://cdn.jirengu.com/book.jirengu.com/img/8.jpg\"</span> /&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;&lt;a href=<span class=\"string\">\"#\"</span>&gt;&lt;img src=<span class=\"string\">\"\"</span> data-src=<span class=\"string\">\"http://cdn.jirengu.com/book.jirengu.com/img/9.jpg\"</span> /&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;&lt;a href=<span class=\"string\">\"#\"</span>&gt;&lt;img src=<span class=\"string\">\"\"</span> data-src=<span class=\"string\">\"http://cdn.jirengu.com/book.jirengu.com/img/10.jpg\"</span> /&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;&lt;a href=<span class=\"string\">\"#\"</span>&gt;&lt;img src=<span class=\"string\">\"\"</span> data-src=<span class=\"string\">\"http://cdn.jirengu.com/book.jirengu.com/img/11.jpg\"</span> /&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;&lt;a href=<span class=\"string\">\"#\"</span>&gt;&lt;img src=<span class=\"string\">\"\"</span> data-src=<span class=\"string\">\"http://cdn.jirengu.com/book.jirengu.com/img/12.jpg\"</span> /&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;&lt;a href=<span class=\"string\">\"#\"</span>&gt;&lt;img src=<span class=\"string\">\"\"</span> data-src=<span class=\"string\">\"http://cdn.jirengu.com/book.jirengu.com/img/13.jpg\"</span> /&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;&lt;a href=<span class=\"string\">\"#\"</span>&gt;&lt;img src=<span class=\"string\">\"\"</span> data-src=<span class=\"string\">\"http://cdn.jirengu.com/book.jirengu.com/img/14.jpg\"</span> /&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;&lt;a href=<span class=\"string\">\"#\"</span>&gt;&lt;img src=<span class=\"string\">\"\"</span> data-src=<span class=\"string\">\"http://cdn.jirengu.com/book.jirengu.com/img/15.jpg\"</span> /&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;&lt;a href=<span class=\"string\">\"#\"</span>&gt;&lt;img src=<span class=\"string\">\"\"</span> data-src=<span class=\"string\">\"http://cdn.jirengu.com/book.jirengu.com/img/16.jpg\"</span> /&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"http://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"https://cdn.bootcss.com/underscore.js/1.9.0/underscore-min.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    // 注意: 需要引入jQuery和underscore</span><br><span class=\"line\">$(<span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    // 获取window的引用:</span><br><span class=\"line\">    var <span class=\"variable\">$window</span> = $(window);</span><br><span class=\"line\">    // 获取包含data-src属性的img，并以jQuery对象存入数组:</span><br><span class=\"line\">    var lazyImgs = _.map($(<span class=\"string\">'img[data-src]'</span>).get(), <span class=\"keyword\">function</span> (i) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> $(i);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    // 定义事件函数:</span><br><span class=\"line\">    var onScroll = <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">        // 获取页面滚动的高度:</span><br><span class=\"line\">        var wtop = <span class=\"variable\">$window</span>.scrollTop();</span><br><span class=\"line\">        // 判断是否还有未加载的img:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lazyImgs.length &gt; 0) &#123;</span><br><span class=\"line\">            // 获取可视区域高度:</span><br><span class=\"line\">            var wheight = <span class=\"variable\">$window</span>.height();</span><br><span class=\"line\">            // 存放待删除的索引:</span><br><span class=\"line\">            var loadedIndex = [];</span><br><span class=\"line\">            // 循环处理数组的每个img元素:</span><br><span class=\"line\">            _.each(lazyImgs, <span class=\"keyword\">function</span> (<span class=\"variable\">$i</span>, index) &#123;</span><br><span class=\"line\">                // 判断是否在可视范围内:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"variable\">$i</span>.offset().top - wtop &lt; wheight) &#123;</span><br><span class=\"line\">                    // 设置src属性:</span><br><span class=\"line\">                    <span class=\"variable\">$i</span>.attr(<span class=\"string\">'src'</span>, <span class=\"variable\">$i</span>.attr(<span class=\"string\">'data-src'</span>));</span><br><span class=\"line\">                    // 添加到待删除数组:</span><br><span class=\"line\">                    loadedIndex.unshift(index);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            // 删除已处理的对象:</span><br><span class=\"line\">            _.each(loadedIndex, <span class=\"keyword\">function</span> (index) &#123;</span><br><span class=\"line\">                lazyImgs.splice(index, 1);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    // 绑定事件:</span><br><span class=\"line\">    <span class=\"variable\">$window</span>.scroll(onScroll);</span><br><span class=\"line\">    // 手动触发一次:</span><br><span class=\"line\">    onScroll();</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在网页中，常常需要用到图片，而图片需要消耗较大的流量。正常情况下，浏览器会解析整个HTML代码，然后从上到下依次加载<code>&lt;img src=&quot;xxx&quot;&gt;</code>的图片标签。如果页面很长，隐藏在页面下方的图片其实已经被浏览器加载了。如果用户不向下滚动页面，就没有看到这些图片，相当于白白浪费了图片的流量。</p>\n<p>所以，淘宝、京东这些流量非常巨大的电商，商品介绍页又必须有大量的图片，因此，这些页面的图片都是“按需加载”，即用户滚动页面时显示出来的时候才加载图片。当网速非常快的时候，用户并不能感知懒加载的动作，既省流量又不影响用户浏览。</p>\n<p>本文给出一种利用jQuery实现图片懒加载的原理。它的基本思想是：在输出HTML的时候，不要直接输出<code>&lt;img src=&quot;xxx&quot;</code>，而是输出如下的img标签：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;img src=<span class=\"string\">\"/static/loading.gif\"</span> data-src=<span class=\"string\">\"http://真正的图片地址/xxx.jpg\"</span>&gt;</span><br></pre></td></tr></table></figure></p>\n<p>因此，页面显示的图片是一个gif加载动画。当页面滚动时，如果图片出现在屏幕中，就利用jQuery把<code>&lt;img&gt;</code>的src属性替换为data-src的内容，浏览器就会实时加载。<br>为了更好的体验，初始加载中给src一个默认的gif图片。<br>JavaScript代码如下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 注意: 需要引入jQuery和underscore</span><br><span class=\"line\">$(<span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    // 获取window的引用:</span><br><span class=\"line\">    var <span class=\"variable\">$window</span> = $(window);</span><br><span class=\"line\">    // 获取包含data-src属性的img，并以jQuery对象存入数组:</span><br><span class=\"line\">    var lazyImgs = _.map($(<span class=\"string\">'img[data-src]'</span>).get(), <span class=\"keyword\">function</span> (i) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> $(i);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    // 定义事件函数:</span><br><span class=\"line\">    var onScroll = <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">        // 获取页面滚动的高度:</span><br><span class=\"line\">        var wtop = <span class=\"variable\">$window</span>.scrollTop();</span><br><span class=\"line\">        // 判断是否还有未加载的img:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lazyImgs.length &gt; 0) &#123;</span><br><span class=\"line\">            // 获取可视区域高度:</span><br><span class=\"line\">            var wheight = <span class=\"variable\">$window</span>.height();</span><br><span class=\"line\">            // 存放待删除的索引:</span><br><span class=\"line\">            var loadedIndex = [];</span><br><span class=\"line\">            // 循环处理数组的每个img元素:</span><br><span class=\"line\">            _.each(lazyImgs, <span class=\"keyword\">function</span> (<span class=\"variable\">$i</span>, index) &#123;</span><br><span class=\"line\">                // 判断是否在可视范围内:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"variable\">$i</span>.offset().top - wtop &lt; wheight) &#123;</span><br><span class=\"line\">                    // 设置src属性:</span><br><span class=\"line\">                    <span class=\"variable\">$i</span>.attr(<span class=\"string\">'src'</span>, <span class=\"variable\">$i</span>.attr(<span class=\"string\">'data-src'</span>));</span><br><span class=\"line\">                    // 添加到待删除数组:</span><br><span class=\"line\">                    loadedIndex.unshift(index);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            // 删除已处理的对象:</span><br><span class=\"line\">            _.each(loadedIndex, <span class=\"keyword\">function</span> (index) &#123;</span><br><span class=\"line\">                lazyImgs.splice(index, 1);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    // 绑定事件:</span><br><span class=\"line\">    <span class=\"variable\">$window</span>.scroll(onScroll);</span><br><span class=\"line\">    // 手动触发一次:</span><br><span class=\"line\">    onScroll();</span><br></pre></td></tr></table></figure></p>\n<p><code>onScroll()</code>函数最后要手动触发一次，因为页面显示时，并未触发scroll事件。如果图片已经在可视区域内，这些图片仍然是loading状态，需要手动触发一次，就可以正常显示。<br>要测试图片懒加载效果，可以在Chrome浏览器的控制台选择“Network”，把“Online”改为“Slow 3G”就可以模拟慢速网络下浏览器懒加载图片的效果。<br>下面贴上完整测试的代码<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!doctype html&gt;</span><br><span class=\"line\">&lt;html lang=<span class=\"string\">\"en\"</span>&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=<span class=\"string\">\"UTF-8\"</span>&gt;</span><br><span class=\"line\">    &lt;title&gt;ssss&lt;/title&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;style&gt;</span><br><span class=\"line\">        ul,li&#123;</span><br><span class=\"line\">            list-style:none;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .container&#123;</span><br><span class=\"line\">            width: 600px;</span><br><span class=\"line\">            margin: 0 auto;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .container li&#123;</span><br><span class=\"line\">            <span class=\"built_in\">float</span>: left;</span><br><span class=\"line\">            margin: 10px 10px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .container li img&#123;</span><br><span class=\"line\">            width: 240px;</span><br><span class=\"line\">            height: 180px;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p&#123;</span><br><span class=\"line\">            <span class=\"built_in\">float</span>: left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;ul class=<span class=\"string\">\"container\"</span>&gt;</span><br><span class=\"line\">    &lt;li&gt;&lt;a href=<span class=\"string\">\"#\"</span>&gt;&lt;img src=<span class=\"string\">\"\"</span> data-src=<span class=\"string\">\"http://cdn.jirengu.com/book.jirengu.com/img/1.jpg\"</span> /&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;&lt;a href=<span class=\"string\">\"#\"</span>&gt;&lt;img src=<span class=\"string\">\"\"</span> data-src=<span class=\"string\">\"http://cdn.jirengu.com/book.jirengu.com/img/2.jpg\"</span> /&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;&lt;a href=<span class=\"string\">\"#\"</span>&gt;&lt;img src=<span class=\"string\">\"\"</span> data-src=<span class=\"string\">\"http://cdn.jirengu.com/book.jirengu.com/img/3.jpg\"</span> /&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;&lt;a href=<span class=\"string\">\"#\"</span>&gt;&lt;img src=<span class=\"string\">\"\"</span> data-src=<span class=\"string\">\"http://cdn.jirengu.com/book.jirengu.com/img/4.jpg\"</span> /&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;&lt;a href=<span class=\"string\">\"#\"</span>&gt;&lt;img src=<span class=\"string\">\"\"</span> data-src=<span class=\"string\">\"http://cdn.jirengu.com/book.jirengu.com/img/5.jpg\"</span> /&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;&lt;a href=<span class=\"string\">\"#\"</span>&gt;&lt;img src=<span class=\"string\">\"\"</span> data-src=<span class=\"string\">\"http://cdn.jirengu.com/book.jirengu.com/img/6.jpg\"</span> /&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;&lt;a href=<span class=\"string\">\"#\"</span>&gt;&lt;img src=<span class=\"string\">\"\"</span> data-src=<span class=\"string\">\"http://cdn.jirengu.com/book.jirengu.com/img/7.jpg\"</span> /&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;&lt;a href=<span class=\"string\">\"#\"</span>&gt;&lt;img src=<span class=\"string\">\"\"</span> data-src=<span class=\"string\">\"http://cdn.jirengu.com/book.jirengu.com/img/8.jpg\"</span> /&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;&lt;a href=<span class=\"string\">\"#\"</span>&gt;&lt;img src=<span class=\"string\">\"\"</span> data-src=<span class=\"string\">\"http://cdn.jirengu.com/book.jirengu.com/img/9.jpg\"</span> /&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;&lt;a href=<span class=\"string\">\"#\"</span>&gt;&lt;img src=<span class=\"string\">\"\"</span> data-src=<span class=\"string\">\"http://cdn.jirengu.com/book.jirengu.com/img/10.jpg\"</span> /&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;&lt;a href=<span class=\"string\">\"#\"</span>&gt;&lt;img src=<span class=\"string\">\"\"</span> data-src=<span class=\"string\">\"http://cdn.jirengu.com/book.jirengu.com/img/11.jpg\"</span> /&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;&lt;a href=<span class=\"string\">\"#\"</span>&gt;&lt;img src=<span class=\"string\">\"\"</span> data-src=<span class=\"string\">\"http://cdn.jirengu.com/book.jirengu.com/img/12.jpg\"</span> /&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;&lt;a href=<span class=\"string\">\"#\"</span>&gt;&lt;img src=<span class=\"string\">\"\"</span> data-src=<span class=\"string\">\"http://cdn.jirengu.com/book.jirengu.com/img/13.jpg\"</span> /&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;&lt;a href=<span class=\"string\">\"#\"</span>&gt;&lt;img src=<span class=\"string\">\"\"</span> data-src=<span class=\"string\">\"http://cdn.jirengu.com/book.jirengu.com/img/14.jpg\"</span> /&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;&lt;a href=<span class=\"string\">\"#\"</span>&gt;&lt;img src=<span class=\"string\">\"\"</span> data-src=<span class=\"string\">\"http://cdn.jirengu.com/book.jirengu.com/img/15.jpg\"</span> /&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;&lt;a href=<span class=\"string\">\"#\"</span>&gt;&lt;img src=<span class=\"string\">\"\"</span> data-src=<span class=\"string\">\"http://cdn.jirengu.com/book.jirengu.com/img/16.jpg\"</span> /&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"http://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"https://cdn.bootcss.com/underscore.js/1.9.0/underscore-min.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    // 注意: 需要引入jQuery和underscore</span><br><span class=\"line\">$(<span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    // 获取window的引用:</span><br><span class=\"line\">    var <span class=\"variable\">$window</span> = $(window);</span><br><span class=\"line\">    // 获取包含data-src属性的img，并以jQuery对象存入数组:</span><br><span class=\"line\">    var lazyImgs = _.map($(<span class=\"string\">'img[data-src]'</span>).get(), <span class=\"keyword\">function</span> (i) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> $(i);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    // 定义事件函数:</span><br><span class=\"line\">    var onScroll = <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">        // 获取页面滚动的高度:</span><br><span class=\"line\">        var wtop = <span class=\"variable\">$window</span>.scrollTop();</span><br><span class=\"line\">        // 判断是否还有未加载的img:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lazyImgs.length &gt; 0) &#123;</span><br><span class=\"line\">            // 获取可视区域高度:</span><br><span class=\"line\">            var wheight = <span class=\"variable\">$window</span>.height();</span><br><span class=\"line\">            // 存放待删除的索引:</span><br><span class=\"line\">            var loadedIndex = [];</span><br><span class=\"line\">            // 循环处理数组的每个img元素:</span><br><span class=\"line\">            _.each(lazyImgs, <span class=\"keyword\">function</span> (<span class=\"variable\">$i</span>, index) &#123;</span><br><span class=\"line\">                // 判断是否在可视范围内:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"variable\">$i</span>.offset().top - wtop &lt; wheight) &#123;</span><br><span class=\"line\">                    // 设置src属性:</span><br><span class=\"line\">                    <span class=\"variable\">$i</span>.attr(<span class=\"string\">'src'</span>, <span class=\"variable\">$i</span>.attr(<span class=\"string\">'data-src'</span>));</span><br><span class=\"line\">                    // 添加到待删除数组:</span><br><span class=\"line\">                    loadedIndex.unshift(index);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            // 删除已处理的对象:</span><br><span class=\"line\">            _.each(loadedIndex, <span class=\"keyword\">function</span> (index) &#123;</span><br><span class=\"line\">                lazyImgs.splice(index, 1);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    // 绑定事件:</span><br><span class=\"line\">    <span class=\"variable\">$window</span>.scroll(onScroll);</span><br><span class=\"line\">    // 手动触发一次:</span><br><span class=\"line\">    onScroll();</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"PT从零开始，怎么玩","date":"2021-12-31T05:07:09.000Z","_content":"\n#### 前言:\n什么叫PT？\nPT 是个小圈子，重分享，有规矩的地方。如果你不愿意与别人共享你的资源与带宽且 对所谓的规则不满(实在不合理可以 PM 管理协商)，那么请出门左拐，X 宝付费拷资源和充 值迅雷是你的好选择。\n另外 PT 是非营利的，捐赠被用于租用服务器和购买原盘、购买压制机器等。您的捐赠 是为了网站的更好发展。所以捐赠与购买视频网站 VIP 是有本质上的区别的。\n玩 PT 不是被 PT 玩，不要因为玩 PT 花费太多时间，而影响到你的工作和生活。有问题尽量自己先百度或查看站内规则和常见问题，不要直接问，提问也要说明你遇到了什么样的问题，之前做了什么操作等。这样别人才好帮助你更好的解决问题，节省大家的时间。\n#### 一、名词解释:\n一、名词解释:\nBT: 是用在对等网络中文件分享的网络协议程序。和点对点(point-to-point)的协议程序不\n同， 最大特点就是下载的人越多，下载速度就越快，因为在你下载的同时，会把下载到的 部分文件上传给其他人，其他人下载了也会把下载的部分分享出来。\nPT:\n因为 BT 有太多下了就跑，不愿意做分享的人，所以催生了 PT(Private Tracker)的产生。\n因此提供 PT 服务的网站是不公开的，采用邀请制或是不定时开放注册。用户注册后会 得到一个 passkey，服务器由 passkey 识别每个用户，用户从某 PT 站下载种子后，该种子即 带有用户的 passkey。因此 PT 的种子是不可外流到其他地方\n所以在出现问题在 QQ 群活其他位置询问时，一定要隐藏好你的 passkey 值。例如:截 图是用马赛克遮挡 passkey 值，因为如果你的 key 泄露某些别用用心的人就可以使用你的 key。PT 想对于 BT 有两个明显的改进:一是私密的小范围下载，二是进行流量统计，其根据下载量决定你的权限。\n\n### 算了，名词我也不会解释。。。。。下面直接说重点，怎么玩：\n1.先进玩pt的圈子。主要有：pt贴吧，qq群，tg群。\n2.进群求一些小网站，比如阿童木，pt时间。如果没人给（几乎不可能），你就等开放注册吧。\n3.注册入站，先使用qb或者其他**非迅雷**的下载器，下载free标志的种子。因为pt是计算下载量的，不然你 分享率低了（ 上传量/下载量 = 分享率），你号就没了。\n4.最后下载器挂着，你已经就入门了。你就等你的上传量上去吧，上传量上去你就求大佬发其他大站点的药💊吧。。。再不懂的加q群问。","source":"_posts/PT从零开始.md","raw":"---\ntitle: PT从零开始，怎么玩\ndate: 2021-12-31 13:07:09\ntags: pt\n---\n\n#### 前言:\n什么叫PT？\nPT 是个小圈子，重分享，有规矩的地方。如果你不愿意与别人共享你的资源与带宽且 对所谓的规则不满(实在不合理可以 PM 管理协商)，那么请出门左拐，X 宝付费拷资源和充 值迅雷是你的好选择。\n另外 PT 是非营利的，捐赠被用于租用服务器和购买原盘、购买压制机器等。您的捐赠 是为了网站的更好发展。所以捐赠与购买视频网站 VIP 是有本质上的区别的。\n玩 PT 不是被 PT 玩，不要因为玩 PT 花费太多时间，而影响到你的工作和生活。有问题尽量自己先百度或查看站内规则和常见问题，不要直接问，提问也要说明你遇到了什么样的问题，之前做了什么操作等。这样别人才好帮助你更好的解决问题，节省大家的时间。\n#### 一、名词解释:\n一、名词解释:\nBT: 是用在对等网络中文件分享的网络协议程序。和点对点(point-to-point)的协议程序不\n同， 最大特点就是下载的人越多，下载速度就越快，因为在你下载的同时，会把下载到的 部分文件上传给其他人，其他人下载了也会把下载的部分分享出来。\nPT:\n因为 BT 有太多下了就跑，不愿意做分享的人，所以催生了 PT(Private Tracker)的产生。\n因此提供 PT 服务的网站是不公开的，采用邀请制或是不定时开放注册。用户注册后会 得到一个 passkey，服务器由 passkey 识别每个用户，用户从某 PT 站下载种子后，该种子即 带有用户的 passkey。因此 PT 的种子是不可外流到其他地方\n所以在出现问题在 QQ 群活其他位置询问时，一定要隐藏好你的 passkey 值。例如:截 图是用马赛克遮挡 passkey 值，因为如果你的 key 泄露某些别用用心的人就可以使用你的 key。PT 想对于 BT 有两个明显的改进:一是私密的小范围下载，二是进行流量统计，其根据下载量决定你的权限。\n\n### 算了，名词我也不会解释。。。。。下面直接说重点，怎么玩：\n1.先进玩pt的圈子。主要有：pt贴吧，qq群，tg群。\n2.进群求一些小网站，比如阿童木，pt时间。如果没人给（几乎不可能），你就等开放注册吧。\n3.注册入站，先使用qb或者其他**非迅雷**的下载器，下载free标志的种子。因为pt是计算下载量的，不然你 分享率低了（ 上传量/下载量 = 分享率），你号就没了。\n4.最后下载器挂着，你已经就入门了。你就等你的上传量上去吧，上传量上去你就求大佬发其他大站点的药💊吧。。。再不懂的加q群问。","slug":"PT从零开始","published":1,"updated":"2021-12-31T08:06:23.761Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxu46m380006dc6knsr1uymg","content":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言:\"></a>前言:</h4><p>什么叫PT？<br>PT 是个小圈子，重分享，有规矩的地方。如果你不愿意与别人共享你的资源与带宽且 对所谓的规则不满(实在不合理可以 PM 管理协商)，那么请出门左拐，X 宝付费拷资源和充 值迅雷是你的好选择。<br>另外 PT 是非营利的，捐赠被用于租用服务器和购买原盘、购买压制机器等。您的捐赠 是为了网站的更好发展。所以捐赠与购买视频网站 VIP 是有本质上的区别的。<br>玩 PT 不是被 PT 玩，不要因为玩 PT 花费太多时间，而影响到你的工作和生活。有问题尽量自己先百度或查看站内规则和常见问题，不要直接问，提问也要说明你遇到了什么样的问题，之前做了什么操作等。这样别人才好帮助你更好的解决问题，节省大家的时间。</p>\n<h4 id=\"一、名词解释\"><a href=\"#一、名词解释\" class=\"headerlink\" title=\"一、名词解释:\"></a>一、名词解释:</h4><p>一、名词解释:<br>BT: 是用在对等网络中文件分享的网络协议程序。和点对点(point-to-point)的协议程序不<br>同， 最大特点就是下载的人越多，下载速度就越快，因为在你下载的同时，会把下载到的 部分文件上传给其他人，其他人下载了也会把下载的部分分享出来。<br>PT:<br>因为 BT 有太多下了就跑，不愿意做分享的人，所以催生了 PT(Private Tracker)的产生。<br>因此提供 PT 服务的网站是不公开的，采用邀请制或是不定时开放注册。用户注册后会 得到一个 passkey，服务器由 passkey 识别每个用户，用户从某 PT 站下载种子后，该种子即 带有用户的 passkey。因此 PT 的种子是不可外流到其他地方<br>所以在出现问题在 QQ 群活其他位置询问时，一定要隐藏好你的 passkey 值。例如:截 图是用马赛克遮挡 passkey 值，因为如果你的 key 泄露某些别用用心的人就可以使用你的 key。PT 想对于 BT 有两个明显的改进:一是私密的小范围下载，二是进行流量统计，其根据下载量决定你的权限。</p>\n<h3 id=\"算了，名词我也不会解释。。。。。下面直接说重点，怎么玩：\"><a href=\"#算了，名词我也不会解释。。。。。下面直接说重点，怎么玩：\" class=\"headerlink\" title=\"算了，名词我也不会解释。。。。。下面直接说重点，怎么玩：\"></a>算了，名词我也不会解释。。。。。下面直接说重点，怎么玩：</h3><p>1.先进玩pt的圈子。主要有：pt贴吧，qq群，tg群。<br>2.进群求一些小网站，比如阿童木，pt时间。如果没人给（几乎不可能），你就等开放注册吧。<br>3.注册入站，先使用qb或者其他<strong>非迅雷</strong>的下载器，下载free标志的种子。因为pt是计算下载量的，不然你 分享率低了（ 上传量/下载量 = 分享率），你号就没了。<br>4.最后下载器挂着，你已经就入门了。你就等你的上传量上去吧，上传量上去你就求大佬发其他大站点的药💊吧。。。再不懂的加q群问。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言:\"></a>前言:</h4><p>什么叫PT？<br>PT 是个小圈子，重分享，有规矩的地方。如果你不愿意与别人共享你的资源与带宽且 对所谓的规则不满(实在不合理可以 PM 管理协商)，那么请出门左拐，X 宝付费拷资源和充 值迅雷是你的好选择。<br>另外 PT 是非营利的，捐赠被用于租用服务器和购买原盘、购买压制机器等。您的捐赠 是为了网站的更好发展。所以捐赠与购买视频网站 VIP 是有本质上的区别的。<br>玩 PT 不是被 PT 玩，不要因为玩 PT 花费太多时间，而影响到你的工作和生活。有问题尽量自己先百度或查看站内规则和常见问题，不要直接问，提问也要说明你遇到了什么样的问题，之前做了什么操作等。这样别人才好帮助你更好的解决问题，节省大家的时间。</p>\n<h4 id=\"一、名词解释\"><a href=\"#一、名词解释\" class=\"headerlink\" title=\"一、名词解释:\"></a>一、名词解释:</h4><p>一、名词解释:<br>BT: 是用在对等网络中文件分享的网络协议程序。和点对点(point-to-point)的协议程序不<br>同， 最大特点就是下载的人越多，下载速度就越快，因为在你下载的同时，会把下载到的 部分文件上传给其他人，其他人下载了也会把下载的部分分享出来。<br>PT:<br>因为 BT 有太多下了就跑，不愿意做分享的人，所以催生了 PT(Private Tracker)的产生。<br>因此提供 PT 服务的网站是不公开的，采用邀请制或是不定时开放注册。用户注册后会 得到一个 passkey，服务器由 passkey 识别每个用户，用户从某 PT 站下载种子后，该种子即 带有用户的 passkey。因此 PT 的种子是不可外流到其他地方<br>所以在出现问题在 QQ 群活其他位置询问时，一定要隐藏好你的 passkey 值。例如:截 图是用马赛克遮挡 passkey 值，因为如果你的 key 泄露某些别用用心的人就可以使用你的 key。PT 想对于 BT 有两个明显的改进:一是私密的小范围下载，二是进行流量统计，其根据下载量决定你的权限。</p>\n<h3 id=\"算了，名词我也不会解释。。。。。下面直接说重点，怎么玩：\"><a href=\"#算了，名词我也不会解释。。。。。下面直接说重点，怎么玩：\" class=\"headerlink\" title=\"算了，名词我也不会解释。。。。。下面直接说重点，怎么玩：\"></a>算了，名词我也不会解释。。。。。下面直接说重点，怎么玩：</h3><p>1.先进玩pt的圈子。主要有：pt贴吧，qq群，tg群。<br>2.进群求一些小网站，比如阿童木，pt时间。如果没人给（几乎不可能），你就等开放注册吧。<br>3.注册入站，先使用qb或者其他<strong>非迅雷</strong>的下载器，下载free标志的种子。因为pt是计算下载量的，不然你 分享率低了（ 上传量/下载量 = 分享率），你号就没了。<br>4.最后下载器挂着，你已经就入门了。你就等你的上传量上去吧，上传量上去你就求大佬发其他大站点的药💊吧。。。再不懂的加q群问。</p>\n"},{"title":"React的生命周期","date":"2018-08-14T07:30:13.000Z","_content":"\n\n![](React的生命周期/123.jpg)\n#### getDefaultProps\nobject getDefaultProps()\n执行过一次后，被创建的类会有缓存，映射的值会存在this.props,前提是这个prop不是父组件指定的 \n这个方法在对象被创建之前执行，因此不能在方法内调用this.props ，另外，注意任何getDefaultProps()返回的对象在实例中共享，不是复制。\n\n#### getInitialState\nobject getInitialState()\n控件加载之前执行，返回值会被用于state的初始化值\n\n#### componentWillMount\nvoid componentWillMount()\n执行一次，在初始化render之前执行，如果在这个方法内调用setState，render()知道state发生变化，并且只执行一次\n\n#### render\nReactElement render()\nrender的时候会调用render()会被调用 \n调用render()方法时，首先检查this.props和this.state返回一个子元素，子元素可以是DOM组件或者其他自定义复合控件的虚拟实现 \n如果不想渲染可以返回null或者false，这种场景下，react渲染一个`<noscript>`标签，当返回null或者false时，ReactDOM.findDOMNode(this)返回null \nrender()方法是很纯净的，这就意味着不要在这个方法里初始化组件的state，每次执行时返回相同的值，不会读写DOM或者与服务器交互，如果必须如服务器交互，在componentDidMount()方法中实现或者其他生命周期的方法中实现，保持render()方法纯净使得服务器更准确，组件更简单\n\n#### componentDidMount\nvoid componentDidMount()\n在初始化render之后只执行一次，在这个方法内，可以访问任何组件，componentDidMount()方法中的子组件在父组件之前执行\n从这个函数开始，就可以和 js 其他框架交互了，例如设置计时 setTimeout 或者 setInterval，或者发起网络请求\n\n#### shouldComponentUpdate\n```bash\nboolean shouldComponentUpdate(\n  object nextProps, object nextState\n}\n\n```\n这个方法在初始化render时不会执行，当props或者state发生变化时执行，并且是在render之前，当新的props或者state不需要更新组件时，返回false\n``` bash\nshouldComponentUpdate: function(nextProps, nextState) {\n  return nextProps.id !== this.props.id;\n}\n```\n当shouldComponentUpdate方法返回false时，就不会执行render()方法，componentWillUpdate和componentDidUpdate方法也不会被调用\n默认情况下，shouldComponentUpdate方法返回true防止state快速变化时的问题，但是如果·state不变，props只读，可以直接覆盖shouldComponentUpdate用于比较props和state的变化，决定UI是否更新，当组件比较多时，使用这个方法能有效提高应用性能.\n#### componentWillUpdate\n``` bash\nvoid componentWillUpdate(\n  object nextProps, object nextState\n)\n```\n当props和state发生变化时执行，并且在render方法之前执行，当然初始化render时不执行该方法，需要特别注意的是，在这个函数里面，你就不能使用this.setState来修改状态。这个函数调用之后，就会把nextProps和nextState分别设置到this.props和this.state中。紧接着这个函数，就会调用render()来更新界面了\n#### componentDidUpdate\n``` bash\nvoid componentDidUpdate(\n  object prevProps, object prevState\n)\n```\n组件更新结束之后执行，在初始化render时不执行.\n#### componentWillReceiveProps\n```bash\nvoid componentWillReceiveProps(\n  object nextProps\n)\n```\n当props发生变化时执行，初始化render时不执行，在这个回调函数里面，你可以根据属性的变化，通过调用this.setState()来更新你的组件状态，旧的属性还是可以通过this.props来获取,这里调用更新状态是安全的，并不会触发额外的render调用\n```bash\ncomponentWillReceiveProps: function(nextProps) {\n  this.setState({\n    likesIncreasing: nextProps.likeCount > this.props.likeCount\n  });\n}\n```\n#### componentWillUnmount\nvoid componentWillUnmount()\n当组件要被从界面上移除的时候，就会调用componentWillUnmount(),在这个函数中，可以做一些组件相关的清理工作，例如取消计时器、网络请求等","source":"_posts/React的生命周期.md","raw":"---\ntitle: React的生命周期\ndate: 2018-08-14 15:30:13\ntags:\n---\n\n\n![](React的生命周期/123.jpg)\n#### getDefaultProps\nobject getDefaultProps()\n执行过一次后，被创建的类会有缓存，映射的值会存在this.props,前提是这个prop不是父组件指定的 \n这个方法在对象被创建之前执行，因此不能在方法内调用this.props ，另外，注意任何getDefaultProps()返回的对象在实例中共享，不是复制。\n\n#### getInitialState\nobject getInitialState()\n控件加载之前执行，返回值会被用于state的初始化值\n\n#### componentWillMount\nvoid componentWillMount()\n执行一次，在初始化render之前执行，如果在这个方法内调用setState，render()知道state发生变化，并且只执行一次\n\n#### render\nReactElement render()\nrender的时候会调用render()会被调用 \n调用render()方法时，首先检查this.props和this.state返回一个子元素，子元素可以是DOM组件或者其他自定义复合控件的虚拟实现 \n如果不想渲染可以返回null或者false，这种场景下，react渲染一个`<noscript>`标签，当返回null或者false时，ReactDOM.findDOMNode(this)返回null \nrender()方法是很纯净的，这就意味着不要在这个方法里初始化组件的state，每次执行时返回相同的值，不会读写DOM或者与服务器交互，如果必须如服务器交互，在componentDidMount()方法中实现或者其他生命周期的方法中实现，保持render()方法纯净使得服务器更准确，组件更简单\n\n#### componentDidMount\nvoid componentDidMount()\n在初始化render之后只执行一次，在这个方法内，可以访问任何组件，componentDidMount()方法中的子组件在父组件之前执行\n从这个函数开始，就可以和 js 其他框架交互了，例如设置计时 setTimeout 或者 setInterval，或者发起网络请求\n\n#### shouldComponentUpdate\n```bash\nboolean shouldComponentUpdate(\n  object nextProps, object nextState\n}\n\n```\n这个方法在初始化render时不会执行，当props或者state发生变化时执行，并且是在render之前，当新的props或者state不需要更新组件时，返回false\n``` bash\nshouldComponentUpdate: function(nextProps, nextState) {\n  return nextProps.id !== this.props.id;\n}\n```\n当shouldComponentUpdate方法返回false时，就不会执行render()方法，componentWillUpdate和componentDidUpdate方法也不会被调用\n默认情况下，shouldComponentUpdate方法返回true防止state快速变化时的问题，但是如果·state不变，props只读，可以直接覆盖shouldComponentUpdate用于比较props和state的变化，决定UI是否更新，当组件比较多时，使用这个方法能有效提高应用性能.\n#### componentWillUpdate\n``` bash\nvoid componentWillUpdate(\n  object nextProps, object nextState\n)\n```\n当props和state发生变化时执行，并且在render方法之前执行，当然初始化render时不执行该方法，需要特别注意的是，在这个函数里面，你就不能使用this.setState来修改状态。这个函数调用之后，就会把nextProps和nextState分别设置到this.props和this.state中。紧接着这个函数，就会调用render()来更新界面了\n#### componentDidUpdate\n``` bash\nvoid componentDidUpdate(\n  object prevProps, object prevState\n)\n```\n组件更新结束之后执行，在初始化render时不执行.\n#### componentWillReceiveProps\n```bash\nvoid componentWillReceiveProps(\n  object nextProps\n)\n```\n当props发生变化时执行，初始化render时不执行，在这个回调函数里面，你可以根据属性的变化，通过调用this.setState()来更新你的组件状态，旧的属性还是可以通过this.props来获取,这里调用更新状态是安全的，并不会触发额外的render调用\n```bash\ncomponentWillReceiveProps: function(nextProps) {\n  this.setState({\n    likesIncreasing: nextProps.likeCount > this.props.likeCount\n  });\n}\n```\n#### componentWillUnmount\nvoid componentWillUnmount()\n当组件要被从界面上移除的时候，就会调用componentWillUnmount(),在这个函数中，可以做一些组件相关的清理工作，例如取消计时器、网络请求等","slug":"React的生命周期","published":1,"updated":"2021-12-31T07:27:38.182Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxu46m3a0007dc6kf47n0rfa","content":"<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/14/React的生命周期/123.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h4 id=\"getDefaultProps\"><a href=\"#getDefaultProps\" class=\"headerlink\" title=\"getDefaultProps\"></a>getDefaultProps</h4><p>object getDefaultProps()<br>执行过一次后，被创建的类会有缓存，映射的值会存在this.props,前提是这个prop不是父组件指定的<br>这个方法在对象被创建之前执行，因此不能在方法内调用this.props ，另外，注意任何getDefaultProps()返回的对象在实例中共享，不是复制。</p>\n<h4 id=\"getInitialState\"><a href=\"#getInitialState\" class=\"headerlink\" title=\"getInitialState\"></a>getInitialState</h4><p>object getInitialState()<br>控件加载之前执行，返回值会被用于state的初始化值</p>\n<h4 id=\"componentWillMount\"><a href=\"#componentWillMount\" class=\"headerlink\" title=\"componentWillMount\"></a>componentWillMount</h4><p>void componentWillMount()<br>执行一次，在初始化render之前执行，如果在这个方法内调用setState，render()知道state发生变化，并且只执行一次</p>\n<h4 id=\"render\"><a href=\"#render\" class=\"headerlink\" title=\"render\"></a>render</h4><p>ReactElement render()<br>render的时候会调用render()会被调用<br>调用render()方法时，首先检查this.props和this.state返回一个子元素，子元素可以是DOM组件或者其他自定义复合控件的虚拟实现<br>如果不想渲染可以返回null或者false，这种场景下，react渲染一个<code>&lt;noscript&gt;</code>标签，当返回null或者false时，ReactDOM.findDOMNode(this)返回null<br>render()方法是很纯净的，这就意味着不要在这个方法里初始化组件的state，每次执行时返回相同的值，不会读写DOM或者与服务器交互，如果必须如服务器交互，在componentDidMount()方法中实现或者其他生命周期的方法中实现，保持render()方法纯净使得服务器更准确，组件更简单</p>\n<h4 id=\"componentDidMount\"><a href=\"#componentDidMount\" class=\"headerlink\" title=\"componentDidMount\"></a>componentDidMount</h4><p>void componentDidMount()<br>在初始化render之后只执行一次，在这个方法内，可以访问任何组件，componentDidMount()方法中的子组件在父组件之前执行<br>从这个函数开始，就可以和 js 其他框架交互了，例如设置计时 setTimeout 或者 setInterval，或者发起网络请求</p>\n<h4 id=\"shouldComponentUpdate\"><a href=\"#shouldComponentUpdate\" class=\"headerlink\" title=\"shouldComponentUpdate\"></a>shouldComponentUpdate</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">boolean shouldComponentUpdate(</span><br><span class=\"line\">  object nextProps, object nextState</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个方法在初始化render时不会执行，当props或者state发生变化时执行，并且是在render之前，当新的props或者state不需要更新组件时，返回false<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shouldComponentUpdate: <span class=\"keyword\">function</span>(nextProps, nextState) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> nextProps.id !== this.props.id;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>当shouldComponentUpdate方法返回false时，就不会执行render()方法，componentWillUpdate和componentDidUpdate方法也不会被调用<br>默认情况下，shouldComponentUpdate方法返回true防止state快速变化时的问题，但是如果·state不变，props只读，可以直接覆盖shouldComponentUpdate用于比较props和state的变化，决定UI是否更新，当组件比较多时，使用这个方法能有效提高应用性能.</p>\n<h4 id=\"componentWillUpdate\"><a href=\"#componentWillUpdate\" class=\"headerlink\" title=\"componentWillUpdate\"></a>componentWillUpdate</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void componentWillUpdate(</span><br><span class=\"line\">  object nextProps, object nextState</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>当props和state发生变化时执行，并且在render方法之前执行，当然初始化render时不执行该方法，需要特别注意的是，在这个函数里面，你就不能使用this.setState来修改状态。这个函数调用之后，就会把nextProps和nextState分别设置到this.props和this.state中。紧接着这个函数，就会调用render()来更新界面了</p>\n<h4 id=\"componentDidUpdate\"><a href=\"#componentDidUpdate\" class=\"headerlink\" title=\"componentDidUpdate\"></a>componentDidUpdate</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void componentDidUpdate(</span><br><span class=\"line\">  object prevProps, object prevState</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>组件更新结束之后执行，在初始化render时不执行.</p>\n<h4 id=\"componentWillReceiveProps\"><a href=\"#componentWillReceiveProps\" class=\"headerlink\" title=\"componentWillReceiveProps\"></a>componentWillReceiveProps</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void componentWillReceiveProps(</span><br><span class=\"line\">  object nextProps</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>当props发生变化时执行，初始化render时不执行，在这个回调函数里面，你可以根据属性的变化，通过调用this.setState()来更新你的组件状态，旧的属性还是可以通过this.props来获取,这里调用更新状态是安全的，并不会触发额外的render调用<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">componentWillReceiveProps: <span class=\"keyword\">function</span>(nextProps) &#123;</span><br><span class=\"line\">  this.setState(&#123;</span><br><span class=\"line\">    likesIncreasing: nextProps.likeCount &gt; this.props.likeCount</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"componentWillUnmount\"><a href=\"#componentWillUnmount\" class=\"headerlink\" title=\"componentWillUnmount\"></a>componentWillUnmount</h4><p>void componentWillUnmount()<br>当组件要被从界面上移除的时候，就会调用componentWillUnmount(),在这个函数中，可以做一些组件相关的清理工作，例如取消计时器、网络请求等</p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/14/React的生命周期/123.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h4 id=\"getDefaultProps\"><a href=\"#getDefaultProps\" class=\"headerlink\" title=\"getDefaultProps\"></a>getDefaultProps</h4><p>object getDefaultProps()<br>执行过一次后，被创建的类会有缓存，映射的值会存在this.props,前提是这个prop不是父组件指定的<br>这个方法在对象被创建之前执行，因此不能在方法内调用this.props ，另外，注意任何getDefaultProps()返回的对象在实例中共享，不是复制。</p>\n<h4 id=\"getInitialState\"><a href=\"#getInitialState\" class=\"headerlink\" title=\"getInitialState\"></a>getInitialState</h4><p>object getInitialState()<br>控件加载之前执行，返回值会被用于state的初始化值</p>\n<h4 id=\"componentWillMount\"><a href=\"#componentWillMount\" class=\"headerlink\" title=\"componentWillMount\"></a>componentWillMount</h4><p>void componentWillMount()<br>执行一次，在初始化render之前执行，如果在这个方法内调用setState，render()知道state发生变化，并且只执行一次</p>\n<h4 id=\"render\"><a href=\"#render\" class=\"headerlink\" title=\"render\"></a>render</h4><p>ReactElement render()<br>render的时候会调用render()会被调用<br>调用render()方法时，首先检查this.props和this.state返回一个子元素，子元素可以是DOM组件或者其他自定义复合控件的虚拟实现<br>如果不想渲染可以返回null或者false，这种场景下，react渲染一个<code>&lt;noscript&gt;</code>标签，当返回null或者false时，ReactDOM.findDOMNode(this)返回null<br>render()方法是很纯净的，这就意味着不要在这个方法里初始化组件的state，每次执行时返回相同的值，不会读写DOM或者与服务器交互，如果必须如服务器交互，在componentDidMount()方法中实现或者其他生命周期的方法中实现，保持render()方法纯净使得服务器更准确，组件更简单</p>\n<h4 id=\"componentDidMount\"><a href=\"#componentDidMount\" class=\"headerlink\" title=\"componentDidMount\"></a>componentDidMount</h4><p>void componentDidMount()<br>在初始化render之后只执行一次，在这个方法内，可以访问任何组件，componentDidMount()方法中的子组件在父组件之前执行<br>从这个函数开始，就可以和 js 其他框架交互了，例如设置计时 setTimeout 或者 setInterval，或者发起网络请求</p>\n<h4 id=\"shouldComponentUpdate\"><a href=\"#shouldComponentUpdate\" class=\"headerlink\" title=\"shouldComponentUpdate\"></a>shouldComponentUpdate</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">boolean shouldComponentUpdate(</span><br><span class=\"line\">  object nextProps, object nextState</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个方法在初始化render时不会执行，当props或者state发生变化时执行，并且是在render之前，当新的props或者state不需要更新组件时，返回false<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shouldComponentUpdate: <span class=\"keyword\">function</span>(nextProps, nextState) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> nextProps.id !== this.props.id;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>当shouldComponentUpdate方法返回false时，就不会执行render()方法，componentWillUpdate和componentDidUpdate方法也不会被调用<br>默认情况下，shouldComponentUpdate方法返回true防止state快速变化时的问题，但是如果·state不变，props只读，可以直接覆盖shouldComponentUpdate用于比较props和state的变化，决定UI是否更新，当组件比较多时，使用这个方法能有效提高应用性能.</p>\n<h4 id=\"componentWillUpdate\"><a href=\"#componentWillUpdate\" class=\"headerlink\" title=\"componentWillUpdate\"></a>componentWillUpdate</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void componentWillUpdate(</span><br><span class=\"line\">  object nextProps, object nextState</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>当props和state发生变化时执行，并且在render方法之前执行，当然初始化render时不执行该方法，需要特别注意的是，在这个函数里面，你就不能使用this.setState来修改状态。这个函数调用之后，就会把nextProps和nextState分别设置到this.props和this.state中。紧接着这个函数，就会调用render()来更新界面了</p>\n<h4 id=\"componentDidUpdate\"><a href=\"#componentDidUpdate\" class=\"headerlink\" title=\"componentDidUpdate\"></a>componentDidUpdate</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void componentDidUpdate(</span><br><span class=\"line\">  object prevProps, object prevState</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>组件更新结束之后执行，在初始化render时不执行.</p>\n<h4 id=\"componentWillReceiveProps\"><a href=\"#componentWillReceiveProps\" class=\"headerlink\" title=\"componentWillReceiveProps\"></a>componentWillReceiveProps</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void componentWillReceiveProps(</span><br><span class=\"line\">  object nextProps</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>当props发生变化时执行，初始化render时不执行，在这个回调函数里面，你可以根据属性的变化，通过调用this.setState()来更新你的组件状态，旧的属性还是可以通过this.props来获取,这里调用更新状态是安全的，并不会触发额外的render调用<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">componentWillReceiveProps: <span class=\"keyword\">function</span>(nextProps) &#123;</span><br><span class=\"line\">  this.setState(&#123;</span><br><span class=\"line\">    likesIncreasing: nextProps.likeCount &gt; this.props.likeCount</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"componentWillUnmount\"><a href=\"#componentWillUnmount\" class=\"headerlink\" title=\"componentWillUnmount\"></a>componentWillUnmount</h4><p>void componentWillUnmount()<br>当组件要被从界面上移除的时候，就会调用componentWillUnmount(),在这个函数中，可以做一些组件相关的清理工作，例如取消计时器、网络请求等</p>\n"},{"title":"dva.js知识地图","date":"2018-10-31T08:17:55.000Z","_content":"#### Promises\nPromise 用于更优雅地处理异步请求。比如发起异步请求：\n```\nfetch('/api/todos')\n  .then(res => res.json())\n  .then(data => ({ data }))\n  .catch(err => ({ err }));\n\n```\n定义 Promise 。\n```\nconst delay = (timeout) => {\n  return new Promise(resolve => {\n    setTimeout(resolve, timeout);\n  });\n};\n\ndelay(1000).then(_ => {\n  console.log('executed');\n});\n```","source":"_posts/dva-js知识地图.md","raw":"---\ntitle: dva.js知识地图\ndate: 2018-10-31 16:17:55\ntags:\n---\n#### Promises\nPromise 用于更优雅地处理异步请求。比如发起异步请求：\n```\nfetch('/api/todos')\n  .then(res => res.json())\n  .then(data => ({ data }))\n  .catch(err => ({ err }));\n\n```\n定义 Promise 。\n```\nconst delay = (timeout) => {\n  return new Promise(resolve => {\n    setTimeout(resolve, timeout);\n  });\n};\n\ndelay(1000).then(_ => {\n  console.log('executed');\n});\n```","slug":"dva-js知识地图","published":1,"updated":"2021-12-31T07:27:38.183Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxu46m3b000adc6ke3qhg2fy","content":"<h4 id=\"Promises\"><a href=\"#Promises\" class=\"headerlink\" title=\"Promises\"></a>Promises</h4><p>Promise 用于更优雅地处理异步请求。比如发起异步请求：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetch(&apos;/api/todos&apos;)</span><br><span class=\"line\">  .then(res =&gt; res.json())</span><br><span class=\"line\">  .then(data =&gt; (&#123; data &#125;))</span><br><span class=\"line\">  .catch(err =&gt; (&#123; err &#125;));</span><br></pre></td></tr></table></figure></p>\n<p>定义 Promise 。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const delay = (timeout) =&gt; &#123;</span><br><span class=\"line\">  return new Promise(resolve =&gt; &#123;</span><br><span class=\"line\">    setTimeout(resolve, timeout);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">delay(1000).then(_ =&gt; &#123;</span><br><span class=\"line\">  console.log(&apos;executed&apos;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Promises\"><a href=\"#Promises\" class=\"headerlink\" title=\"Promises\"></a>Promises</h4><p>Promise 用于更优雅地处理异步请求。比如发起异步请求：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetch(&apos;/api/todos&apos;)</span><br><span class=\"line\">  .then(res =&gt; res.json())</span><br><span class=\"line\">  .then(data =&gt; (&#123; data &#125;))</span><br><span class=\"line\">  .catch(err =&gt; (&#123; err &#125;));</span><br></pre></td></tr></table></figure></p>\n<p>定义 Promise 。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const delay = (timeout) =&gt; &#123;</span><br><span class=\"line\">  return new Promise(resolve =&gt; &#123;</span><br><span class=\"line\">    setTimeout(resolve, timeout);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">delay(1000).then(_ =&gt; &#123;</span><br><span class=\"line\">  console.log(&apos;executed&apos;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n"},{"title":"web前端优化加快网页加载速度方法","date":"2018-08-08T06:59:07.000Z","_content":"\n#### 速度优化\n1. 清理 HTML 文档\n    css推荐的做法：把 CSS 放在 HTML 的上面部分，文档头之内，这可以确保正常的渲染过程\n    js推荐的做法：将 JavaScript 放置在 head 标签内或 HTML 文档的上部，这会阻塞 HTML 和 CSS 元素的加载过程。推荐放在html后面\n    将CSS和JS放到外部文件中引用的话，CSS放头，JS放尾 。\n    最后一定要压缩一下 CSS, JS 和 HTML。压缩代码可参考[站长之家工具](http://tool.chinaz.com/Tools/CssFormat.aspx)\n2. 请减少HTTP请求基本原理：\n一个正常HTTP请求的流程简述：如在浏览器中输入\"www.xxxxxx.com\"并按下回车，浏览器再与这个URL指向的服务器建立连接，然后浏览器才能向服务器发送请求信息，服务器在接受到请求的信息后再返回相应的信息，浏览器接收到来自服务器的应答信息后，对这些数据解释执行。\n\n而当我们请求的网页文件中有很多图片、CSS、JS甚至音乐等信息时，将会频繁的与服务器建立连接，与释放连接，这必定会造成资源的浪费，且每个HTTP请求都会对服务器和浏览器产生性能负担。\n\n网速相同的条件下，下载一个100KB的图片比下载两个50KB的图片要快。所以，请减少HTTP请求。 \n解决办法：\n合并图片（css sprites），合并CSS和JS文件；图片较多的页面也可以使用 lazyLoad 等技术进行优化。\n图片也要进行无损压缩，压缩图片网站推荐https://tinypng.com/\n3. 使用 CDN 和缓存提高速度\nCDN 是一种缓存方法，可极大改善资源的分发时间，同时，它还能实现一些其他的缓存技术，如，利用浏览器缓存。\n合理地设置浏览器缓存，能让浏览器自动存储某些文件，以便加快传输速度。此方法的配置可以直接在源服务器的配置文件中完成。","source":"_posts/web前端优化加快网页加载速度方法.md","raw":"---\ntitle: web前端优化加快网页加载速度方法\ndate: 2018-08-08 14:59:07\ntags:\n---\n\n#### 速度优化\n1. 清理 HTML 文档\n    css推荐的做法：把 CSS 放在 HTML 的上面部分，文档头之内，这可以确保正常的渲染过程\n    js推荐的做法：将 JavaScript 放置在 head 标签内或 HTML 文档的上部，这会阻塞 HTML 和 CSS 元素的加载过程。推荐放在html后面\n    将CSS和JS放到外部文件中引用的话，CSS放头，JS放尾 。\n    最后一定要压缩一下 CSS, JS 和 HTML。压缩代码可参考[站长之家工具](http://tool.chinaz.com/Tools/CssFormat.aspx)\n2. 请减少HTTP请求基本原理：\n一个正常HTTP请求的流程简述：如在浏览器中输入\"www.xxxxxx.com\"并按下回车，浏览器再与这个URL指向的服务器建立连接，然后浏览器才能向服务器发送请求信息，服务器在接受到请求的信息后再返回相应的信息，浏览器接收到来自服务器的应答信息后，对这些数据解释执行。\n\n而当我们请求的网页文件中有很多图片、CSS、JS甚至音乐等信息时，将会频繁的与服务器建立连接，与释放连接，这必定会造成资源的浪费，且每个HTTP请求都会对服务器和浏览器产生性能负担。\n\n网速相同的条件下，下载一个100KB的图片比下载两个50KB的图片要快。所以，请减少HTTP请求。 \n解决办法：\n合并图片（css sprites），合并CSS和JS文件；图片较多的页面也可以使用 lazyLoad 等技术进行优化。\n图片也要进行无损压缩，压缩图片网站推荐https://tinypng.com/\n3. 使用 CDN 和缓存提高速度\nCDN 是一种缓存方法，可极大改善资源的分发时间，同时，它还能实现一些其他的缓存技术，如，利用浏览器缓存。\n合理地设置浏览器缓存，能让浏览器自动存储某些文件，以便加快传输速度。此方法的配置可以直接在源服务器的配置文件中完成。","slug":"web前端优化加快网页加载速度方法","published":1,"updated":"2021-12-31T07:27:38.183Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxu46m3k000bdc6kyb36krun","content":"<h4 id=\"速度优化\"><a href=\"#速度优化\" class=\"headerlink\" title=\"速度优化\"></a>速度优化</h4><ol>\n<li>清理 HTML 文档<br> css推荐的做法：把 CSS 放在 HTML 的上面部分，文档头之内，这可以确保正常的渲染过程<br> js推荐的做法：将 JavaScript 放置在 head 标签内或 HTML 文档的上部，这会阻塞 HTML 和 CSS 元素的加载过程。推荐放在html后面<br> 将CSS和JS放到外部文件中引用的话，CSS放头，JS放尾 。<br> 最后一定要压缩一下 CSS, JS 和 HTML。压缩代码可参考<a href=\"http://tool.chinaz.com/Tools/CssFormat.aspx\" target=\"_blank\" rel=\"noopener\">站长之家工具</a></li>\n<li>请减少HTTP请求基本原理：<br>一个正常HTTP请求的流程简述：如在浏览器中输入”<a href=\"http://www.xxxxxx.com&quot;并按下回车，浏览器再与这个URL指向的服务器建立连接，然后浏览器才能向服务器发送请求信息，服务器在接受到请求的信息后再返回相应的信息，浏览器接收到来自服务器的应答信息后，对这些数据解释执行。\" target=\"_blank\" rel=\"noopener\">www.xxxxxx.com&quot;并按下回车，浏览器再与这个URL指向的服务器建立连接，然后浏览器才能向服务器发送请求信息，服务器在接受到请求的信息后再返回相应的信息，浏览器接收到来自服务器的应答信息后，对这些数据解释执行。</a></li>\n</ol>\n<p>而当我们请求的网页文件中有很多图片、CSS、JS甚至音乐等信息时，将会频繁的与服务器建立连接，与释放连接，这必定会造成资源的浪费，且每个HTTP请求都会对服务器和浏览器产生性能负担。</p>\n<p>网速相同的条件下，下载一个100KB的图片比下载两个50KB的图片要快。所以，请减少HTTP请求。<br>解决办法：<br>合并图片（css sprites），合并CSS和JS文件；图片较多的页面也可以使用 lazyLoad 等技术进行优化。<br>图片也要进行无损压缩，压缩图片网站推荐<a href=\"https://tinypng.com/\" target=\"_blank\" rel=\"noopener\">https://tinypng.com/</a></p>\n<ol start=\"3\">\n<li>使用 CDN 和缓存提高速度<br>CDN 是一种缓存方法，可极大改善资源的分发时间，同时，它还能实现一些其他的缓存技术，如，利用浏览器缓存。<br>合理地设置浏览器缓存，能让浏览器自动存储某些文件，以便加快传输速度。此方法的配置可以直接在源服务器的配置文件中完成。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"速度优化\"><a href=\"#速度优化\" class=\"headerlink\" title=\"速度优化\"></a>速度优化</h4><ol>\n<li>清理 HTML 文档<br> css推荐的做法：把 CSS 放在 HTML 的上面部分，文档头之内，这可以确保正常的渲染过程<br> js推荐的做法：将 JavaScript 放置在 head 标签内或 HTML 文档的上部，这会阻塞 HTML 和 CSS 元素的加载过程。推荐放在html后面<br> 将CSS和JS放到外部文件中引用的话，CSS放头，JS放尾 。<br> 最后一定要压缩一下 CSS, JS 和 HTML。压缩代码可参考<a href=\"http://tool.chinaz.com/Tools/CssFormat.aspx\" target=\"_blank\" rel=\"noopener\">站长之家工具</a></li>\n<li>请减少HTTP请求基本原理：<br>一个正常HTTP请求的流程简述：如在浏览器中输入”<a href=\"http://www.xxxxxx.com&quot;并按下回车，浏览器再与这个URL指向的服务器建立连接，然后浏览器才能向服务器发送请求信息，服务器在接受到请求的信息后再返回相应的信息，浏览器接收到来自服务器的应答信息后，对这些数据解释执行。\" target=\"_blank\" rel=\"noopener\">www.xxxxxx.com&quot;并按下回车，浏览器再与这个URL指向的服务器建立连接，然后浏览器才能向服务器发送请求信息，服务器在接受到请求的信息后再返回相应的信息，浏览器接收到来自服务器的应答信息后，对这些数据解释执行。</a></li>\n</ol>\n<p>而当我们请求的网页文件中有很多图片、CSS、JS甚至音乐等信息时，将会频繁的与服务器建立连接，与释放连接，这必定会造成资源的浪费，且每个HTTP请求都会对服务器和浏览器产生性能负担。</p>\n<p>网速相同的条件下，下载一个100KB的图片比下载两个50KB的图片要快。所以，请减少HTTP请求。<br>解决办法：<br>合并图片（css sprites），合并CSS和JS文件；图片较多的页面也可以使用 lazyLoad 等技术进行优化。<br>图片也要进行无损压缩，压缩图片网站推荐<a href=\"https://tinypng.com/\" target=\"_blank\" rel=\"noopener\">https://tinypng.com/</a></p>\n<ol start=\"3\">\n<li>使用 CDN 和缓存提高速度<br>CDN 是一种缓存方法，可极大改善资源的分发时间，同时，它还能实现一些其他的缓存技术，如，利用浏览器缓存。<br>合理地设置浏览器缓存，能让浏览器自动存储某些文件，以便加快传输速度。此方法的配置可以直接在源服务器的配置文件中完成。</li>\n</ol>\n"},{"title":"zepto的使用方法","date":"2018-08-08T02:08:40.000Z","_content":"\n有些不了解zepto的同学在刚接触的时候肯定有很多疑惑，这个东西怎么用啊，去哪里下载啊，什么时候该用什么时候不该用啊，其实我以前也是这样的。jquery使用多了那么就让我们一起来了解下zepto把。\n\n在移动端用不着pc端兼容难么多的浏览器，所以就有了zepto.js，如果此时用jquery的话就有些重了，现在pc端可以使用jquery，但是反过来的话pc端如果用zepto,js的话就不怎么兼容ie浏览器了。 \n\n这个库几乎和jquery 一样。使用上没什么区别，用法一样，可以理解为zepto.js仿照的jquery.\n绑定事件和jquery一模一样，用下面这个改变背景色的小例子来说明一下↓\n![](zepto的使用方法/a.png)\n此时的用法和jquery，只需要引入zepto文件即可。\n\n但是zepto也不完全和jquery一样，在zepto里面有些功能是默认没有的，比如说animate方法,此时如果想用的话需要在zepto里面增加一个fx模块。因为zepto是基于模块来管理的（将某些特定的功能独立出来形成一个单独的js文件，称为模块）。\n\n之所以采用模块的方式是因为为了提高性能，需要哪个模块的功能就添加哪个模块。\n\nzepto默认是有五个模块的，分别为zepto、event、ajax、form、ie，这五个模块被称为核心模块。\n\n下面这张图是zepto里面的所有模块。\n![](zepto的使用方法/b.png)\n那么如何在zepto里面增加和删除模块呢？\n\n1、首先要安装node.js环境；\n\n2、去zeptojs.com网站下载安装zepto.js,然后解压缩\n\n3、打开cmd命令窗口进入解压缩后的zepto目录（解压后的这个解压文件夹里面） 。\n\n4、执行npm install 命令\n\n5、然后编辑make文件，添加需要的自定义模块并保存\n\n6、然后执行命令 npm run-script dist\n\n7、此时会生成一个dist文件，查看目录dist即构建好的zepto.js\n\n 这时候直接引入你的zepto文件就可以用啦。\n\n在这里我只说了一下zepto的下载和使用，具体模块下的方法请到官方的说明文档查看。\n\n纯手打，如有错误请大家提出指正。","source":"_posts/zepto的使用方法.md","raw":"---\ntitle: zepto的使用方法\ndate: 2018-08-08 10:08:40\ntags: 前端工具\n---\n\n有些不了解zepto的同学在刚接触的时候肯定有很多疑惑，这个东西怎么用啊，去哪里下载啊，什么时候该用什么时候不该用啊，其实我以前也是这样的。jquery使用多了那么就让我们一起来了解下zepto把。\n\n在移动端用不着pc端兼容难么多的浏览器，所以就有了zepto.js，如果此时用jquery的话就有些重了，现在pc端可以使用jquery，但是反过来的话pc端如果用zepto,js的话就不怎么兼容ie浏览器了。 \n\n这个库几乎和jquery 一样。使用上没什么区别，用法一样，可以理解为zepto.js仿照的jquery.\n绑定事件和jquery一模一样，用下面这个改变背景色的小例子来说明一下↓\n![](zepto的使用方法/a.png)\n此时的用法和jquery，只需要引入zepto文件即可。\n\n但是zepto也不完全和jquery一样，在zepto里面有些功能是默认没有的，比如说animate方法,此时如果想用的话需要在zepto里面增加一个fx模块。因为zepto是基于模块来管理的（将某些特定的功能独立出来形成一个单独的js文件，称为模块）。\n\n之所以采用模块的方式是因为为了提高性能，需要哪个模块的功能就添加哪个模块。\n\nzepto默认是有五个模块的，分别为zepto、event、ajax、form、ie，这五个模块被称为核心模块。\n\n下面这张图是zepto里面的所有模块。\n![](zepto的使用方法/b.png)\n那么如何在zepto里面增加和删除模块呢？\n\n1、首先要安装node.js环境；\n\n2、去zeptojs.com网站下载安装zepto.js,然后解压缩\n\n3、打开cmd命令窗口进入解压缩后的zepto目录（解压后的这个解压文件夹里面） 。\n\n4、执行npm install 命令\n\n5、然后编辑make文件，添加需要的自定义模块并保存\n\n6、然后执行命令 npm run-script dist\n\n7、此时会生成一个dist文件，查看目录dist即构建好的zepto.js\n\n 这时候直接引入你的zepto文件就可以用啦。\n\n在这里我只说了一下zepto的下载和使用，具体模块下的方法请到官方的说明文档查看。\n\n纯手打，如有错误请大家提出指正。","slug":"zepto的使用方法","published":1,"updated":"2021-12-31T07:27:38.183Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxu46m3n000ddc6kmfq9eyea","content":"<p>有些不了解zepto的同学在刚接触的时候肯定有很多疑惑，这个东西怎么用啊，去哪里下载啊，什么时候该用什么时候不该用啊，其实我以前也是这样的。jquery使用多了那么就让我们一起来了解下zepto把。</p>\n<p>在移动端用不着pc端兼容难么多的浏览器，所以就有了zepto.js，如果此时用jquery的话就有些重了，现在pc端可以使用jquery，但是反过来的话pc端如果用zepto,js的话就不怎么兼容ie浏览器了。 </p>\n<p>这个库几乎和jquery 一样。使用上没什么区别，用法一样，可以理解为zepto.js仿照的jquery.<br>绑定事件和jquery一模一样，用下面这个改变背景色的小例子来说明一下↓<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/08/zepto的使用方法/a.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br>此时的用法和jquery，只需要引入zepto文件即可。</p>\n<p>但是zepto也不完全和jquery一样，在zepto里面有些功能是默认没有的，比如说animate方法,此时如果想用的话需要在zepto里面增加一个fx模块。因为zepto是基于模块来管理的（将某些特定的功能独立出来形成一个单独的js文件，称为模块）。</p>\n<p>之所以采用模块的方式是因为为了提高性能，需要哪个模块的功能就添加哪个模块。</p>\n<p>zepto默认是有五个模块的，分别为zepto、event、ajax、form、ie，这五个模块被称为核心模块。</p>\n<p>下面这张图是zepto里面的所有模块。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/08/zepto的使用方法/b.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br>那么如何在zepto里面增加和删除模块呢？</p>\n<p>1、首先要安装node.js环境；</p>\n<p>2、去zeptojs.com网站下载安装zepto.js,然后解压缩</p>\n<p>3、打开cmd命令窗口进入解压缩后的zepto目录（解压后的这个解压文件夹里面） 。</p>\n<p>4、执行npm install 命令</p>\n<p>5、然后编辑make文件，添加需要的自定义模块并保存</p>\n<p>6、然后执行命令 npm run-script dist</p>\n<p>7、此时会生成一个dist文件，查看目录dist即构建好的zepto.js</p>\n<p> 这时候直接引入你的zepto文件就可以用啦。</p>\n<p>在这里我只说了一下zepto的下载和使用，具体模块下的方法请到官方的说明文档查看。</p>\n<p>纯手打，如有错误请大家提出指正。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>有些不了解zepto的同学在刚接触的时候肯定有很多疑惑，这个东西怎么用啊，去哪里下载啊，什么时候该用什么时候不该用啊，其实我以前也是这样的。jquery使用多了那么就让我们一起来了解下zepto把。</p>\n<p>在移动端用不着pc端兼容难么多的浏览器，所以就有了zepto.js，如果此时用jquery的话就有些重了，现在pc端可以使用jquery，但是反过来的话pc端如果用zepto,js的话就不怎么兼容ie浏览器了。 </p>\n<p>这个库几乎和jquery 一样。使用上没什么区别，用法一样，可以理解为zepto.js仿照的jquery.<br>绑定事件和jquery一模一样，用下面这个改变背景色的小例子来说明一下↓<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/08/zepto的使用方法/a.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br>此时的用法和jquery，只需要引入zepto文件即可。</p>\n<p>但是zepto也不完全和jquery一样，在zepto里面有些功能是默认没有的，比如说animate方法,此时如果想用的话需要在zepto里面增加一个fx模块。因为zepto是基于模块来管理的（将某些特定的功能独立出来形成一个单独的js文件，称为模块）。</p>\n<p>之所以采用模块的方式是因为为了提高性能，需要哪个模块的功能就添加哪个模块。</p>\n<p>zepto默认是有五个模块的，分别为zepto、event、ajax、form、ie，这五个模块被称为核心模块。</p>\n<p>下面这张图是zepto里面的所有模块。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/08/zepto的使用方法/b.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br>那么如何在zepto里面增加和删除模块呢？</p>\n<p>1、首先要安装node.js环境；</p>\n<p>2、去zeptojs.com网站下载安装zepto.js,然后解压缩</p>\n<p>3、打开cmd命令窗口进入解压缩后的zepto目录（解压后的这个解压文件夹里面） 。</p>\n<p>4、执行npm install 命令</p>\n<p>5、然后编辑make文件，添加需要的自定义模块并保存</p>\n<p>6、然后执行命令 npm run-script dist</p>\n<p>7、此时会生成一个dist文件，查看目录dist即构建好的zepto.js</p>\n<p> 这时候直接引入你的zepto文件就可以用啦。</p>\n<p>在这里我只说了一下zepto的下载和使用，具体模块下的方法请到官方的说明文档查看。</p>\n<p>纯手打，如有错误请大家提出指正。</p>\n"},{"title":"使用http-proxy-middleware解决前端开发中跨域的问题","date":"2018-08-08T01:53:39.000Z","_content":"\n#### 一、使用http-proxy-middleware中间件解决跨域问题\n1. 后端服务是用tornado创建的一个服务(可以根据自己熟悉的搭建一个后端服务器)\n``` bash\n...\nclass JsonHandler(tornado.web.RequestHandler):\n    def get(self):\n        li = [\n            {\"id\": 0, \"name\": \"张三\", \"age\": 20},\n            {\"id\": 1, \"name\": \"李四\", \"age\": 25},\n            {\"id\": 2, \"name\": \"王五\", \"age\": 27}\n        ]\n        self.write(json.dumps(li))\n\n...\n```\n2. 安装包\n``` bash\nnpm install http-proxy-middleware --save-dev\nnpm install webpack --save-dev --save-dev\nnpm install webpack-dev-server --save-dev\nnpm install axios --save\n```\n3. webpack.config.js文件\n``` bash\nvar proxy = require('http-proxy-middleware');\nmodule.exports = {\n    entry:{\n        index:'./index.js', \n    },\n    output:{\n        path:__dirname,\n        filename:'[name].build.js',\n    },\n    module:{\n        loaders:[]\n    },\n    resolve:{\n        extensions:['.js',\".css\",\".jsx\"]\n    },\n    devServer: {\n        proxy: {\n          '/api': { // api表示当前项目请求的key\n            target: 'http://xxxxxxxx:8000', // 代理服务器路径\n            pathRewrite: {'^/api' : '/'}, // 重写路径\n            changeOrigin: true\n          }\n        }\n     }\n}\n```\n4. 请求数据\n``` bash\nimport axios from 'axios';\nvar obtn = document.getElementById('btn');\n\nobtn.addEventListener('click',function(){\n    axios.get('/api/json').then(res=>{\n        console.log(res);\n    })\n})\n```\n\n\n","source":"_posts/使用http-proxy-middleware解决前端开发中跨域的问题.md","raw":"---\ntitle: 使用http-proxy-middleware解决前端开发中跨域的问题\ndate: 2018-08-08 09:53:39\ntags: 前端工具\n---\n\n#### 一、使用http-proxy-middleware中间件解决跨域问题\n1. 后端服务是用tornado创建的一个服务(可以根据自己熟悉的搭建一个后端服务器)\n``` bash\n...\nclass JsonHandler(tornado.web.RequestHandler):\n    def get(self):\n        li = [\n            {\"id\": 0, \"name\": \"张三\", \"age\": 20},\n            {\"id\": 1, \"name\": \"李四\", \"age\": 25},\n            {\"id\": 2, \"name\": \"王五\", \"age\": 27}\n        ]\n        self.write(json.dumps(li))\n\n...\n```\n2. 安装包\n``` bash\nnpm install http-proxy-middleware --save-dev\nnpm install webpack --save-dev --save-dev\nnpm install webpack-dev-server --save-dev\nnpm install axios --save\n```\n3. webpack.config.js文件\n``` bash\nvar proxy = require('http-proxy-middleware');\nmodule.exports = {\n    entry:{\n        index:'./index.js', \n    },\n    output:{\n        path:__dirname,\n        filename:'[name].build.js',\n    },\n    module:{\n        loaders:[]\n    },\n    resolve:{\n        extensions:['.js',\".css\",\".jsx\"]\n    },\n    devServer: {\n        proxy: {\n          '/api': { // api表示当前项目请求的key\n            target: 'http://xxxxxxxx:8000', // 代理服务器路径\n            pathRewrite: {'^/api' : '/'}, // 重写路径\n            changeOrigin: true\n          }\n        }\n     }\n}\n```\n4. 请求数据\n``` bash\nimport axios from 'axios';\nvar obtn = document.getElementById('btn');\n\nobtn.addEventListener('click',function(){\n    axios.get('/api/json').then(res=>{\n        console.log(res);\n    })\n})\n```\n\n\n","slug":"使用http-proxy-middleware解决前端开发中跨域的问题","published":1,"updated":"2021-12-31T07:27:38.188Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxu46m3q000fdc6kce5tdetn","content":"<h4 id=\"一、使用http-proxy-middleware中间件解决跨域问题\"><a href=\"#一、使用http-proxy-middleware中间件解决跨域问题\" class=\"headerlink\" title=\"一、使用http-proxy-middleware中间件解决跨域问题\"></a>一、使用http-proxy-middleware中间件解决跨域问题</h4><ol>\n<li><p>后端服务是用tornado创建的一个服务(可以根据自己熟悉的搭建一个后端服务器)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">class JsonHandler(tornado.web.RequestHandler):</span><br><span class=\"line\">    def get(self):</span><br><span class=\"line\">        li = [</span><br><span class=\"line\">            &#123;<span class=\"string\">\"id\"</span>: 0, <span class=\"string\">\"name\"</span>: <span class=\"string\">\"张三\"</span>, <span class=\"string\">\"age\"</span>: 20&#125;,</span><br><span class=\"line\">            &#123;<span class=\"string\">\"id\"</span>: 1, <span class=\"string\">\"name\"</span>: <span class=\"string\">\"李四\"</span>, <span class=\"string\">\"age\"</span>: 25&#125;,</span><br><span class=\"line\">            &#123;<span class=\"string\">\"id\"</span>: 2, <span class=\"string\">\"name\"</span>: <span class=\"string\">\"王五\"</span>, <span class=\"string\">\"age\"</span>: 27&#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">        self.write(json.dumps(li))</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install http-proxy-middleware --save-dev</span><br><span class=\"line\">npm install webpack --save-dev --save-dev</span><br><span class=\"line\">npm install webpack-dev-server --save-dev</span><br><span class=\"line\">npm install axios --save</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>webpack.config.js文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var proxy = require(<span class=\"string\">'http-proxy-middleware'</span>);</span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    entry:&#123;</span><br><span class=\"line\">        index:<span class=\"string\">'./index.js'</span>, </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output:&#123;</span><br><span class=\"line\">        path:__dirname,</span><br><span class=\"line\">        filename:<span class=\"string\">'[name].build.js'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module:&#123;</span><br><span class=\"line\">        loaders:[]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    resolve:&#123;</span><br><span class=\"line\">        extensions:[<span class=\"string\">'.js'</span>,<span class=\"string\">\".css\"</span>,<span class=\"string\">\".jsx\"</span>]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    devServer: &#123;</span><br><span class=\"line\">        proxy: &#123;</span><br><span class=\"line\">          <span class=\"string\">'/api'</span>: &#123; // api表示当前项目请求的key</span><br><span class=\"line\">            target: <span class=\"string\">'http://xxxxxxxx:8000'</span>, // 代理服务器路径</span><br><span class=\"line\">            pathRewrite: &#123;<span class=\"string\">'^/api'</span> : <span class=\"string\">'/'</span>&#125;, // 重写路径</span><br><span class=\"line\">            changeOrigin: <span class=\"literal\">true</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>请求数据</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import axios from <span class=\"string\">'axios'</span>;</span><br><span class=\"line\">var obtn = document.getElementById(<span class=\"string\">'btn'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">obtn.addEventListener(<span class=\"string\">'click'</span>,<span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">    axios.get(<span class=\"string\">'/api/json'</span>).<span class=\"keyword\">then</span>(res=&gt;&#123;</span><br><span class=\"line\">        console.log(res);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"一、使用http-proxy-middleware中间件解决跨域问题\"><a href=\"#一、使用http-proxy-middleware中间件解决跨域问题\" class=\"headerlink\" title=\"一、使用http-proxy-middleware中间件解决跨域问题\"></a>一、使用http-proxy-middleware中间件解决跨域问题</h4><ol>\n<li><p>后端服务是用tornado创建的一个服务(可以根据自己熟悉的搭建一个后端服务器)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">class JsonHandler(tornado.web.RequestHandler):</span><br><span class=\"line\">    def get(self):</span><br><span class=\"line\">        li = [</span><br><span class=\"line\">            &#123;<span class=\"string\">\"id\"</span>: 0, <span class=\"string\">\"name\"</span>: <span class=\"string\">\"张三\"</span>, <span class=\"string\">\"age\"</span>: 20&#125;,</span><br><span class=\"line\">            &#123;<span class=\"string\">\"id\"</span>: 1, <span class=\"string\">\"name\"</span>: <span class=\"string\">\"李四\"</span>, <span class=\"string\">\"age\"</span>: 25&#125;,</span><br><span class=\"line\">            &#123;<span class=\"string\">\"id\"</span>: 2, <span class=\"string\">\"name\"</span>: <span class=\"string\">\"王五\"</span>, <span class=\"string\">\"age\"</span>: 27&#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">        self.write(json.dumps(li))</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install http-proxy-middleware --save-dev</span><br><span class=\"line\">npm install webpack --save-dev --save-dev</span><br><span class=\"line\">npm install webpack-dev-server --save-dev</span><br><span class=\"line\">npm install axios --save</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>webpack.config.js文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var proxy = require(<span class=\"string\">'http-proxy-middleware'</span>);</span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    entry:&#123;</span><br><span class=\"line\">        index:<span class=\"string\">'./index.js'</span>, </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output:&#123;</span><br><span class=\"line\">        path:__dirname,</span><br><span class=\"line\">        filename:<span class=\"string\">'[name].build.js'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module:&#123;</span><br><span class=\"line\">        loaders:[]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    resolve:&#123;</span><br><span class=\"line\">        extensions:[<span class=\"string\">'.js'</span>,<span class=\"string\">\".css\"</span>,<span class=\"string\">\".jsx\"</span>]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    devServer: &#123;</span><br><span class=\"line\">        proxy: &#123;</span><br><span class=\"line\">          <span class=\"string\">'/api'</span>: &#123; // api表示当前项目请求的key</span><br><span class=\"line\">            target: <span class=\"string\">'http://xxxxxxxx:8000'</span>, // 代理服务器路径</span><br><span class=\"line\">            pathRewrite: &#123;<span class=\"string\">'^/api'</span> : <span class=\"string\">'/'</span>&#125;, // 重写路径</span><br><span class=\"line\">            changeOrigin: <span class=\"literal\">true</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>请求数据</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import axios from <span class=\"string\">'axios'</span>;</span><br><span class=\"line\">var obtn = document.getElementById(<span class=\"string\">'btn'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">obtn.addEventListener(<span class=\"string\">'click'</span>,<span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">    axios.get(<span class=\"string\">'/api/json'</span>).<span class=\"keyword\">then</span>(res=&gt;&#123;</span><br><span class=\"line\">        console.log(res);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"函数防抖和函数分流","date":"2018-10-31T08:57:15.000Z","_content":"### 函数防抖\n函数防抖指的是多次触发事件后，事件处理函数只执行一次，而且是在事件触发操作停止的时候。\n```\nfunction debounce(method,delay) {\n    let timer = null;\n    return function () {\n        let self = this,\n            args = arguments;\n        timer && clearTimeout(timer);\n        timer = setTimeout(function () {\n            method.apply(self,args);\n        },delay);\n    }\n}\nwindow.onscroll = debounce(function () {\n    let scrollTop = document.body.scrollTop || document.documentElement.scrollTop;\n    console.log('滚动条位置：' + scrollTop);\n},200)\n```\n#### 函数防抖的适用性：\n通过上面的例子，我们知道我们可以通过函数防抖，解决了多次触发事件时的性能问题。比如，我们在监听滚动条位置，控制是否显示返回顶部按钮时，就可以将防抖函数应用其中。\n#### 但依然有些功能并不适用：\n当我们做图片懒加载（lazyload）时，需要通过滚动位置，实时显示图片时，如果使用防抖函数，懒加载（lazyload）函数将会不断被延时，只有停下来的时候才会被执行，对于这种需要实时触发事件的情况，就显得不是很友好了。\n\n### 函数节流\n定义：触发函数事件后，短时间间隔内无法连续调用，只有上一次函数执行后，过了规定的时间间隔，才能进行下一次的函数调用。\n\n原理：对处理函数进行延时操作，若设定的延时到来之前，再次触发事件，则清除上一次的延时操作定时器，重新定时。\n```\nfunction throttle(method, mustRunDelay) {\n    let timer,\n        args = arguments,\n        start;\n    return function loop() {\n        let self = this;\n        let now = Date.now();\n        if(!start){\n            start = now;\n        }\n        if(timer){\n            clearTimeout(timer);\n        }\n        if(now - start >= mustRunDelay){\n            method.apply(self, args);\n            start = now;\n        }else {\n            timer = setTimeout(function () {\n                loop.apply(self, args);\n            }, 50);\n        }\n    }\n}\nwindow.onscroll = throttle(function () {\n    let scrollTop = document.body.scrollTop || document.documentElement.scrollTop;\n    console.log('滚动条位置：' + scrollTop);\n},800)\n```","source":"_posts/函数防抖和函数分流.md","raw":"---\ntitle: 函数防抖和函数分流\ndate: 2018-10-31 16:57:15\ntags:\n---\n### 函数防抖\n函数防抖指的是多次触发事件后，事件处理函数只执行一次，而且是在事件触发操作停止的时候。\n```\nfunction debounce(method,delay) {\n    let timer = null;\n    return function () {\n        let self = this,\n            args = arguments;\n        timer && clearTimeout(timer);\n        timer = setTimeout(function () {\n            method.apply(self,args);\n        },delay);\n    }\n}\nwindow.onscroll = debounce(function () {\n    let scrollTop = document.body.scrollTop || document.documentElement.scrollTop;\n    console.log('滚动条位置：' + scrollTop);\n},200)\n```\n#### 函数防抖的适用性：\n通过上面的例子，我们知道我们可以通过函数防抖，解决了多次触发事件时的性能问题。比如，我们在监听滚动条位置，控制是否显示返回顶部按钮时，就可以将防抖函数应用其中。\n#### 但依然有些功能并不适用：\n当我们做图片懒加载（lazyload）时，需要通过滚动位置，实时显示图片时，如果使用防抖函数，懒加载（lazyload）函数将会不断被延时，只有停下来的时候才会被执行，对于这种需要实时触发事件的情况，就显得不是很友好了。\n\n### 函数节流\n定义：触发函数事件后，短时间间隔内无法连续调用，只有上一次函数执行后，过了规定的时间间隔，才能进行下一次的函数调用。\n\n原理：对处理函数进行延时操作，若设定的延时到来之前，再次触发事件，则清除上一次的延时操作定时器，重新定时。\n```\nfunction throttle(method, mustRunDelay) {\n    let timer,\n        args = arguments,\n        start;\n    return function loop() {\n        let self = this;\n        let now = Date.now();\n        if(!start){\n            start = now;\n        }\n        if(timer){\n            clearTimeout(timer);\n        }\n        if(now - start >= mustRunDelay){\n            method.apply(self, args);\n            start = now;\n        }else {\n            timer = setTimeout(function () {\n                loop.apply(self, args);\n            }, 50);\n        }\n    }\n}\nwindow.onscroll = throttle(function () {\n    let scrollTop = document.body.scrollTop || document.documentElement.scrollTop;\n    console.log('滚动条位置：' + scrollTop);\n},800)\n```","slug":"函数防抖和函数分流","published":1,"updated":"2021-12-31T07:27:38.188Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxu46m3u000hdc6kmlj8dvfm","content":"<h3 id=\"函数防抖\"><a href=\"#函数防抖\" class=\"headerlink\" title=\"函数防抖\"></a>函数防抖</h3><p>函数防抖指的是多次触发事件后，事件处理函数只执行一次，而且是在事件触发操作停止的时候。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function debounce(method,delay) &#123;</span><br><span class=\"line\">    let timer = null;</span><br><span class=\"line\">    return function () &#123;</span><br><span class=\"line\">        let self = this,</span><br><span class=\"line\">            args = arguments;</span><br><span class=\"line\">        timer &amp;&amp; clearTimeout(timer);</span><br><span class=\"line\">        timer = setTimeout(function () &#123;</span><br><span class=\"line\">            method.apply(self,args);</span><br><span class=\"line\">        &#125;,delay);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">window.onscroll = debounce(function () &#123;</span><br><span class=\"line\">    let scrollTop = document.body.scrollTop || document.documentElement.scrollTop;</span><br><span class=\"line\">    console.log(&apos;滚动条位置：&apos; + scrollTop);</span><br><span class=\"line\">&#125;,200)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"函数防抖的适用性：\"><a href=\"#函数防抖的适用性：\" class=\"headerlink\" title=\"函数防抖的适用性：\"></a>函数防抖的适用性：</h4><p>通过上面的例子，我们知道我们可以通过函数防抖，解决了多次触发事件时的性能问题。比如，我们在监听滚动条位置，控制是否显示返回顶部按钮时，就可以将防抖函数应用其中。</p>\n<h4 id=\"但依然有些功能并不适用：\"><a href=\"#但依然有些功能并不适用：\" class=\"headerlink\" title=\"但依然有些功能并不适用：\"></a>但依然有些功能并不适用：</h4><p>当我们做图片懒加载（lazyload）时，需要通过滚动位置，实时显示图片时，如果使用防抖函数，懒加载（lazyload）函数将会不断被延时，只有停下来的时候才会被执行，对于这种需要实时触发事件的情况，就显得不是很友好了。</p>\n<h3 id=\"函数节流\"><a href=\"#函数节流\" class=\"headerlink\" title=\"函数节流\"></a>函数节流</h3><p>定义：触发函数事件后，短时间间隔内无法连续调用，只有上一次函数执行后，过了规定的时间间隔，才能进行下一次的函数调用。</p>\n<p>原理：对处理函数进行延时操作，若设定的延时到来之前，再次触发事件，则清除上一次的延时操作定时器，重新定时。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function throttle(method, mustRunDelay) &#123;</span><br><span class=\"line\">    let timer,</span><br><span class=\"line\">        args = arguments,</span><br><span class=\"line\">        start;</span><br><span class=\"line\">    return function loop() &#123;</span><br><span class=\"line\">        let self = this;</span><br><span class=\"line\">        let now = Date.now();</span><br><span class=\"line\">        if(!start)&#123;</span><br><span class=\"line\">            start = now;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if(timer)&#123;</span><br><span class=\"line\">            clearTimeout(timer);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if(now - start &gt;= mustRunDelay)&#123;</span><br><span class=\"line\">            method.apply(self, args);</span><br><span class=\"line\">            start = now;</span><br><span class=\"line\">        &#125;else &#123;</span><br><span class=\"line\">            timer = setTimeout(function () &#123;</span><br><span class=\"line\">                loop.apply(self, args);</span><br><span class=\"line\">            &#125;, 50);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">window.onscroll = throttle(function () &#123;</span><br><span class=\"line\">    let scrollTop = document.body.scrollTop || document.documentElement.scrollTop;</span><br><span class=\"line\">    console.log(&apos;滚动条位置：&apos; + scrollTop);</span><br><span class=\"line\">&#125;,800)</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"函数防抖\"><a href=\"#函数防抖\" class=\"headerlink\" title=\"函数防抖\"></a>函数防抖</h3><p>函数防抖指的是多次触发事件后，事件处理函数只执行一次，而且是在事件触发操作停止的时候。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function debounce(method,delay) &#123;</span><br><span class=\"line\">    let timer = null;</span><br><span class=\"line\">    return function () &#123;</span><br><span class=\"line\">        let self = this,</span><br><span class=\"line\">            args = arguments;</span><br><span class=\"line\">        timer &amp;&amp; clearTimeout(timer);</span><br><span class=\"line\">        timer = setTimeout(function () &#123;</span><br><span class=\"line\">            method.apply(self,args);</span><br><span class=\"line\">        &#125;,delay);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">window.onscroll = debounce(function () &#123;</span><br><span class=\"line\">    let scrollTop = document.body.scrollTop || document.documentElement.scrollTop;</span><br><span class=\"line\">    console.log(&apos;滚动条位置：&apos; + scrollTop);</span><br><span class=\"line\">&#125;,200)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"函数防抖的适用性：\"><a href=\"#函数防抖的适用性：\" class=\"headerlink\" title=\"函数防抖的适用性：\"></a>函数防抖的适用性：</h4><p>通过上面的例子，我们知道我们可以通过函数防抖，解决了多次触发事件时的性能问题。比如，我们在监听滚动条位置，控制是否显示返回顶部按钮时，就可以将防抖函数应用其中。</p>\n<h4 id=\"但依然有些功能并不适用：\"><a href=\"#但依然有些功能并不适用：\" class=\"headerlink\" title=\"但依然有些功能并不适用：\"></a>但依然有些功能并不适用：</h4><p>当我们做图片懒加载（lazyload）时，需要通过滚动位置，实时显示图片时，如果使用防抖函数，懒加载（lazyload）函数将会不断被延时，只有停下来的时候才会被执行，对于这种需要实时触发事件的情况，就显得不是很友好了。</p>\n<h3 id=\"函数节流\"><a href=\"#函数节流\" class=\"headerlink\" title=\"函数节流\"></a>函数节流</h3><p>定义：触发函数事件后，短时间间隔内无法连续调用，只有上一次函数执行后，过了规定的时间间隔，才能进行下一次的函数调用。</p>\n<p>原理：对处理函数进行延时操作，若设定的延时到来之前，再次触发事件，则清除上一次的延时操作定时器，重新定时。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function throttle(method, mustRunDelay) &#123;</span><br><span class=\"line\">    let timer,</span><br><span class=\"line\">        args = arguments,</span><br><span class=\"line\">        start;</span><br><span class=\"line\">    return function loop() &#123;</span><br><span class=\"line\">        let self = this;</span><br><span class=\"line\">        let now = Date.now();</span><br><span class=\"line\">        if(!start)&#123;</span><br><span class=\"line\">            start = now;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if(timer)&#123;</span><br><span class=\"line\">            clearTimeout(timer);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if(now - start &gt;= mustRunDelay)&#123;</span><br><span class=\"line\">            method.apply(self, args);</span><br><span class=\"line\">            start = now;</span><br><span class=\"line\">        &#125;else &#123;</span><br><span class=\"line\">            timer = setTimeout(function () &#123;</span><br><span class=\"line\">                loop.apply(self, args);</span><br><span class=\"line\">            &#125;, 50);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">window.onscroll = throttle(function () &#123;</span><br><span class=\"line\">    let scrollTop = document.body.scrollTop || document.documentElement.scrollTop;</span><br><span class=\"line\">    console.log(&apos;滚动条位置：&apos; + scrollTop);</span><br><span class=\"line\">&#125;,800)</span><br></pre></td></tr></table></figure></p>\n"},{"title":"前端面试题目","date":"2018-08-07T08:23:14.000Z","_content":"\n### 面试题提高\n面试题大部分来源于这里https://github.com/h5bp/Front-end-Developer-Interview-Questions/tree/master/Translations/Chinese\n\n#### HTML\n1. DOCTYPE（文档类型）的作用是什么？\n参考https://witcher42.github.io/2014/05/28/doctype/\n2. 浏览器标准模式 (standards mode) 、几乎标准模式（almost standards mode）和怪异模式 (quirks mode) 之间的区别是什么？\n产生的历史原因是啥？\n怪异模式有哪些怪异的行为？\n3. 使用 data- 属性的好处是什么？\n4. 如果把 HTML5 看作做一个开放平台，那它的构建模块有哪些？\n5. cookies、sessionStorage 和localStorage 的区别\n6. 请解释 下 `<script>`、`<script async> `和 `<script defer>` 的区别。\n7. 为什么通常推荐将 CSS `<link>` 放置在 `<head></head> `之间，而将 JS `<script>` 放置在 `</body>` 之前？你知道有哪些例外吗？\n8. 什么是渐进式渲染 (progressive rendering)？\n9. HTML 和 XHTML 有什么区别？\n10. HMTL5新标签\n#### Javascript\n1. 事件代理\n2. 请解释JavaScript 中this 是如何工作的\n3. javascript继承\n4. javascript模块化\n理解模块化发展过程，理解 commonJS，AMD，CMD，ES6模块化\n5. IIFE 立即执行函数\n6. null undefined区别\nnull表示一个“空”的值，它和0以及空字符串''不同，0是一个数值，''表示长度为0的字符串，而null表示“空”,undefined表示值未定义。\n7. 闭包 与 作用域（重要）\n8. 匿名函数\n9. 你是如何组织自己的代码？是使用模块模式，还是使用经典继承的方法？\n10. 宿主对象 (host objects) 和原生对象 (native objects)\n11. 请指出以下代码的区别：function Person(){}、var person = Person()、var person = new Person()？\n12. apply call bind\n深入到源码如何实现这三个功能的。\n13. new\n源码如何实现的\n14. document.write()\n15. 特性检测 特性推断 UA字符串\n16. Ajax工作原理\n17. 跨域\n图片ping,JSONP,CORS.\n18. 变量声明提升\n19. 冒泡机制\n20. attribute 和 property\n21. document load 和 document DOMContentLoaded\n22. == 和 === 有什么不同\n第一种是==比较，它会自动转换数据类型再比较，很多时候，会得到非常诡异的结果；\n第二种是===比较，它不会自动转换数据类型，如果数据类型不一致，返回false，如果一致，再比较。\n由于JavaScript这个设计缺陷，不要使用==比较，始终坚持使用===比较\n23. 同源策略 (same-origin policy)\nCookie，iframe，AJAX同源\n24. strict模式\n25. 为何通常会认为保留网站现有的全局作用域 (global scope) 不去改变它，是较好的选择\n26. 为何你会使用 load 之类的事件 (event)？此事件有缺点吗？你是否知道其他替代品，以及为何使用它们？\n27. 请解释什么是单页应用 (single page app), 以及如何使其对搜索引擎友好 (SEO-friendly)\n28. Promise\n怎么用？源码如何实现的？\n29. 使用一种可以编译成 JavaScript 的语言来写JavaScript 代码有哪些优缺点？\n30. javascript调试工具\n31. 对象遍历 和 数组遍历\n32. 可变对象和不可变对象\n33. 什么是事件循环 (event loop)\n深入原理，宏任务，微任务等等\n34. let var const\n35. 数组的方法\n36. web worker\n37. 柯里化\n38. 创建对象的三种方法\n39. 深拷贝和浅拷贝\n可以实现手写深拷贝\n40. 图片懒加载\n41. 网页各种高度\n42. 实现页面加载进度条\n43. 箭头函数ES5如何实现\n箭头函数和普通函数的区别\n#### React\n1. 虚拟DOM是啥？以及diff算法原理\n2. react 事件绑定\n3. 生命周期\n4. 函数式编程，纯函数\n5. React创建组件的方式\n6. 组件性能优化\nshuouldComponentUpdate\npureComponent\n不可变数据\nkey\n等等优化方法，每一点的优点和缺点\n\n7. 如何设计一个好组件\n8. 哪里进行网络请求？为什么\n9. 调用setState之后发生了什么\n10. refs\n11. react16新特性\n尤其理解time slice和suspense\n12. 在 React 当中 Element 和 Component 有何区别\n13. 容器组件和展示组件\n14. props.children\n15. 路由实现原理\n16. react的setState同步还是异步？\n17. Redux，react-redux等原理\n18. 如何实现异步网络请求的？\n19. 组件间通信\n20. 高阶组件是什么和常见的高阶组件\n21. React key是干嘛的？\n#### webpack\n1. Loader\n自己如何写一个loader\n2. plugin\n自己如何写一个plugin\n3. webpack原理之普通打包\n4. webpack原理之多文件打包\n5. webpack原理之提取公共文件\n6. webpack 如何做到 tree shaking\n7. webpack配置文件基本概念\n8. webpack构建流程\n9. 前端模块化的理解\n10. 打包很慢，怎么解决？\n11. 打包出来的文件很大，怎么解决？\n\n#### 安全问题\n1. xss\n2. csrf\n等等....\n#### HTTP\n1. 为什么传统上利用多个域名来提供网站资源会更有效\n\n2. Long-Polling、Websockets 和 Server-Sent Event\n\n3. 常见的请求头和响应头\n\n4. 和缓存有关的HTTP首部字段\n\n相当重要。如何应用的？\n\n5. HTTP method\n\n6. HTTP状态码\n\n7. https 加密过程\n\n8. http2新特性\n\n#### 性能\n1. 你会用什么工具来查找代码中的性能问题？\n\n2. 增强网站的页面滚动效能\n\n3. 重排，重绘，合成\n\n相当相当重要\n\n4. 合成层\n\n我在这里理解了一个多星期，静下心来去理解。\n\nhttp://taobaofed.org/blog/2016/04/25/performance-composite/\n\n5. 前端优化方法\n\n6. css3动画和js动画对比\n\n#### 其他问题\n1. 常见排序算法\n2. babel原理\n3. 实现一个幻灯片功能\n4. 你最近遇到过什么技术挑战？你是如何解决的？\n5. 浏览器输入网址后做了什么？\n","source":"_posts/前端面试题目.md","raw":"---\ntitle: 前端面试题目\ndate: 2018-08-07 16:23:14\ntags:\n---\n\n### 面试题提高\n面试题大部分来源于这里https://github.com/h5bp/Front-end-Developer-Interview-Questions/tree/master/Translations/Chinese\n\n#### HTML\n1. DOCTYPE（文档类型）的作用是什么？\n参考https://witcher42.github.io/2014/05/28/doctype/\n2. 浏览器标准模式 (standards mode) 、几乎标准模式（almost standards mode）和怪异模式 (quirks mode) 之间的区别是什么？\n产生的历史原因是啥？\n怪异模式有哪些怪异的行为？\n3. 使用 data- 属性的好处是什么？\n4. 如果把 HTML5 看作做一个开放平台，那它的构建模块有哪些？\n5. cookies、sessionStorage 和localStorage 的区别\n6. 请解释 下 `<script>`、`<script async> `和 `<script defer>` 的区别。\n7. 为什么通常推荐将 CSS `<link>` 放置在 `<head></head> `之间，而将 JS `<script>` 放置在 `</body>` 之前？你知道有哪些例外吗？\n8. 什么是渐进式渲染 (progressive rendering)？\n9. HTML 和 XHTML 有什么区别？\n10. HMTL5新标签\n#### Javascript\n1. 事件代理\n2. 请解释JavaScript 中this 是如何工作的\n3. javascript继承\n4. javascript模块化\n理解模块化发展过程，理解 commonJS，AMD，CMD，ES6模块化\n5. IIFE 立即执行函数\n6. null undefined区别\nnull表示一个“空”的值，它和0以及空字符串''不同，0是一个数值，''表示长度为0的字符串，而null表示“空”,undefined表示值未定义。\n7. 闭包 与 作用域（重要）\n8. 匿名函数\n9. 你是如何组织自己的代码？是使用模块模式，还是使用经典继承的方法？\n10. 宿主对象 (host objects) 和原生对象 (native objects)\n11. 请指出以下代码的区别：function Person(){}、var person = Person()、var person = new Person()？\n12. apply call bind\n深入到源码如何实现这三个功能的。\n13. new\n源码如何实现的\n14. document.write()\n15. 特性检测 特性推断 UA字符串\n16. Ajax工作原理\n17. 跨域\n图片ping,JSONP,CORS.\n18. 变量声明提升\n19. 冒泡机制\n20. attribute 和 property\n21. document load 和 document DOMContentLoaded\n22. == 和 === 有什么不同\n第一种是==比较，它会自动转换数据类型再比较，很多时候，会得到非常诡异的结果；\n第二种是===比较，它不会自动转换数据类型，如果数据类型不一致，返回false，如果一致，再比较。\n由于JavaScript这个设计缺陷，不要使用==比较，始终坚持使用===比较\n23. 同源策略 (same-origin policy)\nCookie，iframe，AJAX同源\n24. strict模式\n25. 为何通常会认为保留网站现有的全局作用域 (global scope) 不去改变它，是较好的选择\n26. 为何你会使用 load 之类的事件 (event)？此事件有缺点吗？你是否知道其他替代品，以及为何使用它们？\n27. 请解释什么是单页应用 (single page app), 以及如何使其对搜索引擎友好 (SEO-friendly)\n28. Promise\n怎么用？源码如何实现的？\n29. 使用一种可以编译成 JavaScript 的语言来写JavaScript 代码有哪些优缺点？\n30. javascript调试工具\n31. 对象遍历 和 数组遍历\n32. 可变对象和不可变对象\n33. 什么是事件循环 (event loop)\n深入原理，宏任务，微任务等等\n34. let var const\n35. 数组的方法\n36. web worker\n37. 柯里化\n38. 创建对象的三种方法\n39. 深拷贝和浅拷贝\n可以实现手写深拷贝\n40. 图片懒加载\n41. 网页各种高度\n42. 实现页面加载进度条\n43. 箭头函数ES5如何实现\n箭头函数和普通函数的区别\n#### React\n1. 虚拟DOM是啥？以及diff算法原理\n2. react 事件绑定\n3. 生命周期\n4. 函数式编程，纯函数\n5. React创建组件的方式\n6. 组件性能优化\nshuouldComponentUpdate\npureComponent\n不可变数据\nkey\n等等优化方法，每一点的优点和缺点\n\n7. 如何设计一个好组件\n8. 哪里进行网络请求？为什么\n9. 调用setState之后发生了什么\n10. refs\n11. react16新特性\n尤其理解time slice和suspense\n12. 在 React 当中 Element 和 Component 有何区别\n13. 容器组件和展示组件\n14. props.children\n15. 路由实现原理\n16. react的setState同步还是异步？\n17. Redux，react-redux等原理\n18. 如何实现异步网络请求的？\n19. 组件间通信\n20. 高阶组件是什么和常见的高阶组件\n21. React key是干嘛的？\n#### webpack\n1. Loader\n自己如何写一个loader\n2. plugin\n自己如何写一个plugin\n3. webpack原理之普通打包\n4. webpack原理之多文件打包\n5. webpack原理之提取公共文件\n6. webpack 如何做到 tree shaking\n7. webpack配置文件基本概念\n8. webpack构建流程\n9. 前端模块化的理解\n10. 打包很慢，怎么解决？\n11. 打包出来的文件很大，怎么解决？\n\n#### 安全问题\n1. xss\n2. csrf\n等等....\n#### HTTP\n1. 为什么传统上利用多个域名来提供网站资源会更有效\n\n2. Long-Polling、Websockets 和 Server-Sent Event\n\n3. 常见的请求头和响应头\n\n4. 和缓存有关的HTTP首部字段\n\n相当重要。如何应用的？\n\n5. HTTP method\n\n6. HTTP状态码\n\n7. https 加密过程\n\n8. http2新特性\n\n#### 性能\n1. 你会用什么工具来查找代码中的性能问题？\n\n2. 增强网站的页面滚动效能\n\n3. 重排，重绘，合成\n\n相当相当重要\n\n4. 合成层\n\n我在这里理解了一个多星期，静下心来去理解。\n\nhttp://taobaofed.org/blog/2016/04/25/performance-composite/\n\n5. 前端优化方法\n\n6. css3动画和js动画对比\n\n#### 其他问题\n1. 常见排序算法\n2. babel原理\n3. 实现一个幻灯片功能\n4. 你最近遇到过什么技术挑战？你是如何解决的？\n5. 浏览器输入网址后做了什么？\n","slug":"前端面试题目","published":1,"updated":"2021-12-31T07:27:38.188Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxu46m3v000jdc6kkdulzho1","content":"<h3 id=\"面试题提高\"><a href=\"#面试题提高\" class=\"headerlink\" title=\"面试题提高\"></a>面试题提高</h3><p>面试题大部分来源于这里<a href=\"https://github.com/h5bp/Front-end-Developer-Interview-Questions/tree/master/Translations/Chinese\" target=\"_blank\" rel=\"noopener\">https://github.com/h5bp/Front-end-Developer-Interview-Questions/tree/master/Translations/Chinese</a></p>\n<h4 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h4><ol>\n<li>DOCTYPE（文档类型）的作用是什么？<br>参考<a href=\"https://witcher42.github.io/2014/05/28/doctype/\" target=\"_blank\" rel=\"noopener\">https://witcher42.github.io/2014/05/28/doctype/</a></li>\n<li>浏览器标准模式 (standards mode) 、几乎标准模式（almost standards mode）和怪异模式 (quirks mode) 之间的区别是什么？<br>产生的历史原因是啥？<br>怪异模式有哪些怪异的行为？</li>\n<li>使用 data- 属性的好处是什么？</li>\n<li>如果把 HTML5 看作做一个开放平台，那它的构建模块有哪些？</li>\n<li>cookies、sessionStorage 和localStorage 的区别</li>\n<li>请解释 下 <code>&lt;script&gt;</code>、<code>&lt;script async&gt;</code>和 <code>&lt;script defer&gt;</code> 的区别。</li>\n<li>为什么通常推荐将 CSS <code>&lt;link&gt;</code> 放置在 <code>&lt;head&gt;&lt;/head&gt;</code>之间，而将 JS <code>&lt;script&gt;</code> 放置在 <code>&lt;/body&gt;</code> 之前？你知道有哪些例外吗？</li>\n<li>什么是渐进式渲染 (progressive rendering)？</li>\n<li>HTML 和 XHTML 有什么区别？</li>\n<li>HMTL5新标签<h4 id=\"Javascript\"><a href=\"#Javascript\" class=\"headerlink\" title=\"Javascript\"></a>Javascript</h4></li>\n<li>事件代理</li>\n<li>请解释JavaScript 中this 是如何工作的</li>\n<li>javascript继承</li>\n<li>javascript模块化<br>理解模块化发展过程，理解 commonJS，AMD，CMD，ES6模块化</li>\n<li>IIFE 立即执行函数</li>\n<li>null undefined区别<br>null表示一个“空”的值，它和0以及空字符串’’不同，0是一个数值，’’表示长度为0的字符串，而null表示“空”,undefined表示值未定义。</li>\n<li>闭包 与 作用域（重要）</li>\n<li>匿名函数</li>\n<li>你是如何组织自己的代码？是使用模块模式，还是使用经典继承的方法？</li>\n<li>宿主对象 (host objects) 和原生对象 (native objects)</li>\n<li>请指出以下代码的区别：function Person(){}、var person = Person()、var person = new Person()？</li>\n<li>apply call bind<br>深入到源码如何实现这三个功能的。</li>\n<li>new<br>源码如何实现的</li>\n<li>document.write()</li>\n<li>特性检测 特性推断 UA字符串</li>\n<li>Ajax工作原理</li>\n<li>跨域<br>图片ping,JSONP,CORS.</li>\n<li>变量声明提升</li>\n<li>冒泡机制</li>\n<li>attribute 和 property</li>\n<li>document load 和 document DOMContentLoaded</li>\n<li>== 和 === 有什么不同<br>第一种是==比较，它会自动转换数据类型再比较，很多时候，会得到非常诡异的结果；<br>第二种是===比较，它不会自动转换数据类型，如果数据类型不一致，返回false，如果一致，再比较。<br>由于JavaScript这个设计缺陷，不要使用==比较，始终坚持使用===比较</li>\n<li>同源策略 (same-origin policy)<br>Cookie，iframe，AJAX同源</li>\n<li>strict模式</li>\n<li>为何通常会认为保留网站现有的全局作用域 (global scope) 不去改变它，是较好的选择</li>\n<li>为何你会使用 load 之类的事件 (event)？此事件有缺点吗？你是否知道其他替代品，以及为何使用它们？</li>\n<li>请解释什么是单页应用 (single page app), 以及如何使其对搜索引擎友好 (SEO-friendly)</li>\n<li>Promise<br>怎么用？源码如何实现的？</li>\n<li>使用一种可以编译成 JavaScript 的语言来写JavaScript 代码有哪些优缺点？</li>\n<li>javascript调试工具</li>\n<li>对象遍历 和 数组遍历</li>\n<li>可变对象和不可变对象</li>\n<li>什么是事件循环 (event loop)<br>深入原理，宏任务，微任务等等</li>\n<li>let var const</li>\n<li>数组的方法</li>\n<li>web worker</li>\n<li>柯里化</li>\n<li>创建对象的三种方法</li>\n<li>深拷贝和浅拷贝<br>可以实现手写深拷贝</li>\n<li>图片懒加载</li>\n<li>网页各种高度</li>\n<li>实现页面加载进度条</li>\n<li>箭头函数ES5如何实现<br>箭头函数和普通函数的区别<h4 id=\"React\"><a href=\"#React\" class=\"headerlink\" title=\"React\"></a>React</h4></li>\n<li>虚拟DOM是啥？以及diff算法原理</li>\n<li>react 事件绑定</li>\n<li>生命周期</li>\n<li>函数式编程，纯函数</li>\n<li>React创建组件的方式</li>\n<li><p>组件性能优化<br>shuouldComponentUpdate<br>pureComponent<br>不可变数据<br>key<br>等等优化方法，每一点的优点和缺点</p>\n</li>\n<li><p>如何设计一个好组件</p>\n</li>\n<li>哪里进行网络请求？为什么</li>\n<li>调用setState之后发生了什么</li>\n<li>refs</li>\n<li>react16新特性<br>尤其理解time slice和suspense</li>\n<li>在 React 当中 Element 和 Component 有何区别</li>\n<li>容器组件和展示组件</li>\n<li>props.children</li>\n<li>路由实现原理</li>\n<li>react的setState同步还是异步？</li>\n<li>Redux，react-redux等原理</li>\n<li>如何实现异步网络请求的？</li>\n<li>组件间通信</li>\n<li>高阶组件是什么和常见的高阶组件</li>\n<li>React key是干嘛的？<h4 id=\"webpack\"><a href=\"#webpack\" class=\"headerlink\" title=\"webpack\"></a>webpack</h4></li>\n<li>Loader<br>自己如何写一个loader</li>\n<li>plugin<br>自己如何写一个plugin</li>\n<li>webpack原理之普通打包</li>\n<li>webpack原理之多文件打包</li>\n<li>webpack原理之提取公共文件</li>\n<li>webpack 如何做到 tree shaking</li>\n<li>webpack配置文件基本概念</li>\n<li>webpack构建流程</li>\n<li>前端模块化的理解</li>\n<li>打包很慢，怎么解决？</li>\n<li>打包出来的文件很大，怎么解决？</li>\n</ol>\n<h4 id=\"安全问题\"><a href=\"#安全问题\" class=\"headerlink\" title=\"安全问题\"></a>安全问题</h4><ol>\n<li>xss</li>\n<li>csrf<br>等等….<h4 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h4></li>\n<li><p>为什么传统上利用多个域名来提供网站资源会更有效</p>\n</li>\n<li><p>Long-Polling、Websockets 和 Server-Sent Event</p>\n</li>\n<li><p>常见的请求头和响应头</p>\n</li>\n<li><p>和缓存有关的HTTP首部字段</p>\n</li>\n</ol>\n<p>相当重要。如何应用的？</p>\n<ol start=\"5\">\n<li><p>HTTP method</p>\n</li>\n<li><p>HTTP状态码</p>\n</li>\n<li><p>https 加密过程</p>\n</li>\n<li><p>http2新特性</p>\n</li>\n</ol>\n<h4 id=\"性能\"><a href=\"#性能\" class=\"headerlink\" title=\"性能\"></a>性能</h4><ol>\n<li><p>你会用什么工具来查找代码中的性能问题？</p>\n</li>\n<li><p>增强网站的页面滚动效能</p>\n</li>\n<li><p>重排，重绘，合成</p>\n</li>\n</ol>\n<p>相当相当重要</p>\n<ol start=\"4\">\n<li>合成层</li>\n</ol>\n<p>我在这里理解了一个多星期，静下心来去理解。</p>\n<p><a href=\"http://taobaofed.org/blog/2016/04/25/performance-composite/\" target=\"_blank\" rel=\"noopener\">http://taobaofed.org/blog/2016/04/25/performance-composite/</a></p>\n<ol start=\"5\">\n<li><p>前端优化方法</p>\n</li>\n<li><p>css3动画和js动画对比</p>\n</li>\n</ol>\n<h4 id=\"其他问题\"><a href=\"#其他问题\" class=\"headerlink\" title=\"其他问题\"></a>其他问题</h4><ol>\n<li>常见排序算法</li>\n<li>babel原理</li>\n<li>实现一个幻灯片功能</li>\n<li>你最近遇到过什么技术挑战？你是如何解决的？</li>\n<li>浏览器输入网址后做了什么？</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"面试题提高\"><a href=\"#面试题提高\" class=\"headerlink\" title=\"面试题提高\"></a>面试题提高</h3><p>面试题大部分来源于这里<a href=\"https://github.com/h5bp/Front-end-Developer-Interview-Questions/tree/master/Translations/Chinese\" target=\"_blank\" rel=\"noopener\">https://github.com/h5bp/Front-end-Developer-Interview-Questions/tree/master/Translations/Chinese</a></p>\n<h4 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h4><ol>\n<li>DOCTYPE（文档类型）的作用是什么？<br>参考<a href=\"https://witcher42.github.io/2014/05/28/doctype/\" target=\"_blank\" rel=\"noopener\">https://witcher42.github.io/2014/05/28/doctype/</a></li>\n<li>浏览器标准模式 (standards mode) 、几乎标准模式（almost standards mode）和怪异模式 (quirks mode) 之间的区别是什么？<br>产生的历史原因是啥？<br>怪异模式有哪些怪异的行为？</li>\n<li>使用 data- 属性的好处是什么？</li>\n<li>如果把 HTML5 看作做一个开放平台，那它的构建模块有哪些？</li>\n<li>cookies、sessionStorage 和localStorage 的区别</li>\n<li>请解释 下 <code>&lt;script&gt;</code>、<code>&lt;script async&gt;</code>和 <code>&lt;script defer&gt;</code> 的区别。</li>\n<li>为什么通常推荐将 CSS <code>&lt;link&gt;</code> 放置在 <code>&lt;head&gt;&lt;/head&gt;</code>之间，而将 JS <code>&lt;script&gt;</code> 放置在 <code>&lt;/body&gt;</code> 之前？你知道有哪些例外吗？</li>\n<li>什么是渐进式渲染 (progressive rendering)？</li>\n<li>HTML 和 XHTML 有什么区别？</li>\n<li>HMTL5新标签<h4 id=\"Javascript\"><a href=\"#Javascript\" class=\"headerlink\" title=\"Javascript\"></a>Javascript</h4></li>\n<li>事件代理</li>\n<li>请解释JavaScript 中this 是如何工作的</li>\n<li>javascript继承</li>\n<li>javascript模块化<br>理解模块化发展过程，理解 commonJS，AMD，CMD，ES6模块化</li>\n<li>IIFE 立即执行函数</li>\n<li>null undefined区别<br>null表示一个“空”的值，它和0以及空字符串’’不同，0是一个数值，’’表示长度为0的字符串，而null表示“空”,undefined表示值未定义。</li>\n<li>闭包 与 作用域（重要）</li>\n<li>匿名函数</li>\n<li>你是如何组织自己的代码？是使用模块模式，还是使用经典继承的方法？</li>\n<li>宿主对象 (host objects) 和原生对象 (native objects)</li>\n<li>请指出以下代码的区别：function Person(){}、var person = Person()、var person = new Person()？</li>\n<li>apply call bind<br>深入到源码如何实现这三个功能的。</li>\n<li>new<br>源码如何实现的</li>\n<li>document.write()</li>\n<li>特性检测 特性推断 UA字符串</li>\n<li>Ajax工作原理</li>\n<li>跨域<br>图片ping,JSONP,CORS.</li>\n<li>变量声明提升</li>\n<li>冒泡机制</li>\n<li>attribute 和 property</li>\n<li>document load 和 document DOMContentLoaded</li>\n<li>== 和 === 有什么不同<br>第一种是==比较，它会自动转换数据类型再比较，很多时候，会得到非常诡异的结果；<br>第二种是===比较，它不会自动转换数据类型，如果数据类型不一致，返回false，如果一致，再比较。<br>由于JavaScript这个设计缺陷，不要使用==比较，始终坚持使用===比较</li>\n<li>同源策略 (same-origin policy)<br>Cookie，iframe，AJAX同源</li>\n<li>strict模式</li>\n<li>为何通常会认为保留网站现有的全局作用域 (global scope) 不去改变它，是较好的选择</li>\n<li>为何你会使用 load 之类的事件 (event)？此事件有缺点吗？你是否知道其他替代品，以及为何使用它们？</li>\n<li>请解释什么是单页应用 (single page app), 以及如何使其对搜索引擎友好 (SEO-friendly)</li>\n<li>Promise<br>怎么用？源码如何实现的？</li>\n<li>使用一种可以编译成 JavaScript 的语言来写JavaScript 代码有哪些优缺点？</li>\n<li>javascript调试工具</li>\n<li>对象遍历 和 数组遍历</li>\n<li>可变对象和不可变对象</li>\n<li>什么是事件循环 (event loop)<br>深入原理，宏任务，微任务等等</li>\n<li>let var const</li>\n<li>数组的方法</li>\n<li>web worker</li>\n<li>柯里化</li>\n<li>创建对象的三种方法</li>\n<li>深拷贝和浅拷贝<br>可以实现手写深拷贝</li>\n<li>图片懒加载</li>\n<li>网页各种高度</li>\n<li>实现页面加载进度条</li>\n<li>箭头函数ES5如何实现<br>箭头函数和普通函数的区别<h4 id=\"React\"><a href=\"#React\" class=\"headerlink\" title=\"React\"></a>React</h4></li>\n<li>虚拟DOM是啥？以及diff算法原理</li>\n<li>react 事件绑定</li>\n<li>生命周期</li>\n<li>函数式编程，纯函数</li>\n<li>React创建组件的方式</li>\n<li><p>组件性能优化<br>shuouldComponentUpdate<br>pureComponent<br>不可变数据<br>key<br>等等优化方法，每一点的优点和缺点</p>\n</li>\n<li><p>如何设计一个好组件</p>\n</li>\n<li>哪里进行网络请求？为什么</li>\n<li>调用setState之后发生了什么</li>\n<li>refs</li>\n<li>react16新特性<br>尤其理解time slice和suspense</li>\n<li>在 React 当中 Element 和 Component 有何区别</li>\n<li>容器组件和展示组件</li>\n<li>props.children</li>\n<li>路由实现原理</li>\n<li>react的setState同步还是异步？</li>\n<li>Redux，react-redux等原理</li>\n<li>如何实现异步网络请求的？</li>\n<li>组件间通信</li>\n<li>高阶组件是什么和常见的高阶组件</li>\n<li>React key是干嘛的？<h4 id=\"webpack\"><a href=\"#webpack\" class=\"headerlink\" title=\"webpack\"></a>webpack</h4></li>\n<li>Loader<br>自己如何写一个loader</li>\n<li>plugin<br>自己如何写一个plugin</li>\n<li>webpack原理之普通打包</li>\n<li>webpack原理之多文件打包</li>\n<li>webpack原理之提取公共文件</li>\n<li>webpack 如何做到 tree shaking</li>\n<li>webpack配置文件基本概念</li>\n<li>webpack构建流程</li>\n<li>前端模块化的理解</li>\n<li>打包很慢，怎么解决？</li>\n<li>打包出来的文件很大，怎么解决？</li>\n</ol>\n<h4 id=\"安全问题\"><a href=\"#安全问题\" class=\"headerlink\" title=\"安全问题\"></a>安全问题</h4><ol>\n<li>xss</li>\n<li>csrf<br>等等….<h4 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h4></li>\n<li><p>为什么传统上利用多个域名来提供网站资源会更有效</p>\n</li>\n<li><p>Long-Polling、Websockets 和 Server-Sent Event</p>\n</li>\n<li><p>常见的请求头和响应头</p>\n</li>\n<li><p>和缓存有关的HTTP首部字段</p>\n</li>\n</ol>\n<p>相当重要。如何应用的？</p>\n<ol start=\"5\">\n<li><p>HTTP method</p>\n</li>\n<li><p>HTTP状态码</p>\n</li>\n<li><p>https 加密过程</p>\n</li>\n<li><p>http2新特性</p>\n</li>\n</ol>\n<h4 id=\"性能\"><a href=\"#性能\" class=\"headerlink\" title=\"性能\"></a>性能</h4><ol>\n<li><p>你会用什么工具来查找代码中的性能问题？</p>\n</li>\n<li><p>增强网站的页面滚动效能</p>\n</li>\n<li><p>重排，重绘，合成</p>\n</li>\n</ol>\n<p>相当相当重要</p>\n<ol start=\"4\">\n<li>合成层</li>\n</ol>\n<p>我在这里理解了一个多星期，静下心来去理解。</p>\n<p><a href=\"http://taobaofed.org/blog/2016/04/25/performance-composite/\" target=\"_blank\" rel=\"noopener\">http://taobaofed.org/blog/2016/04/25/performance-composite/</a></p>\n<ol start=\"5\">\n<li><p>前端优化方法</p>\n</li>\n<li><p>css3动画和js动画对比</p>\n</li>\n</ol>\n<h4 id=\"其他问题\"><a href=\"#其他问题\" class=\"headerlink\" title=\"其他问题\"></a>其他问题</h4><ol>\n<li>常见排序算法</li>\n<li>babel原理</li>\n<li>实现一个幻灯片功能</li>\n<li>你最近遇到过什么技术挑战？你是如何解决的？</li>\n<li>浏览器输入网址后做了什么？</li>\n</ol>\n"}],"PostAsset":[{"_id":"source/_posts/Chrome浏览器Network面板http请求时间分析/network.jpg","slug":"network.jpg","post":"ckxu46m2w0000dc6kwltzb4zy","modified":0,"renderable":0},{"_id":"source/_posts/React的生命周期/123.jpg","slug":"123.jpg","post":"ckxu46m3a0007dc6kf47n0rfa","modified":0,"renderable":0},{"_id":"source/_posts/zepto的使用方法/a.png","slug":"a.png","post":"ckxu46m3n000ddc6kmfq9eyea","modified":0,"renderable":0},{"_id":"source/_posts/zepto的使用方法/b.png","slug":"b.png","post":"ckxu46m3n000ddc6kmfq9eyea","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"ckxu46m2w0000dc6kwltzb4zy","tag_id":"ckxu46m340004dc6kmnp47pxu","_id":"ckxu46m3b0009dc6k4e96xlpn"},{"post_id":"ckxu46m370005dc6kgtyq055f","tag_id":"ckxu46m3a0008dc6k7057ysf3","_id":"ckxu46m3q000edc6kl9h1zqzb"},{"post_id":"ckxu46m3n000ddc6kmfq9eyea","tag_id":"ckxu46m340004dc6kmnp47pxu","_id":"ckxu46m3u000gdc6ko6v7n9f0"},{"post_id":"ckxu46m380006dc6knsr1uymg","tag_id":"ckxu46m3n000cdc6kwihl4vli","_id":"ckxu46m3v000idc6kxfhayi2r"},{"post_id":"ckxu46m3q000fdc6kce5tdetn","tag_id":"ckxu46m340004dc6kmnp47pxu","_id":"ckxu46m3w000kdc6k3cxdom79"}],"Tag":[{"name":"前端工具","_id":"ckxu46m340004dc6kmnp47pxu"},{"name":"JQuery","_id":"ckxu46m3a0008dc6k7057ysf3"},{"name":"pt","_id":"ckxu46m3n000cdc6kwihl4vli"}]}}